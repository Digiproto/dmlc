# Written by Michael.Kang(blackfin.kang@gmail.com)
CC = gcc
SYSTEMC4SKYEYE ?= no
#CFLAGS = -g -Wall -Werror -Wno-unused-value -Wno-unused-variable \
#		 -Wno-unused-function -Wno-switch -Wno-enum-compare \
#		 -Wno-unused-but-set-variable
CFLAGS = -g -Werror-implicit-function-declaration \
		-Wmissing-field-initializers
INCLUDE = -I. -I./backend/
BUILD_DIR = build
#BUILD_DIRS_SKYEYE = $(patsubst %,$(BUILD_DIR)/skyeye/%,$(shell find backend -type d))
BUILD_DIRS_QEMU = $(patsubst %,$(BUILD_DIR)/qemu/%,$(shell find backend -type d))
BUILD_DIRS_SYSTEMC = $(patsubst %,$(BUILD_DIR)/systemc/%,$(shell find backend -type d))
TARGET_NAME = dmlc

# remove DEBUG information
ifeq ($(RELEASE),yes)
CFLAGS += -D RELEASE
endif

# select platform: qemu skyeye
PLATFORM ?= all
#ifeq ($(PLATFORM),skyeye)
#BACKEND_NUM = 2
#TARGETS = $(TARGET_NAME)_skyeye
#else
ifeq ($(PLATFORM),qemu)
BACKEND_NUM = 1
TARGETS = $(TARGET_NAME)_qemu
else
ifeq ($(PLATFORM), systemc)
BACKEND_NUM = 3
TARGETS = $(TARGET_NAME)_systemc
else
ifeq ($(PLATFORM),all)
#TARGETS = $(TARGET_NAME)_skyeye $(TARGET_NAME)_qemu $(TARGET_NAME)_systemc
TARGETS = $(TARGET_NAME)_qemu $(TARGET_NAME)_systemc
else
$(error PLATFORM="$(PLATFORM)" not found, PLATFORM is qemu or skyeye or systemc.)
endif # all
endif # systemc
endif # qemu
#endif # skyeye
CFLAGS_QEMU = $(CFLAGS) -D backend=1
#CFLAGS_SKYEYE = $(CFLAGS) -D backend=2
CFLAGS_SYSTEMC = $(CFLAGS) -D backend=3

# args is diffent on windows or linux
ifeq ($(shell uname),Linux)
	# on linux
	LIBRARY_DIR = 
	LIBRARY = 
else
	# on windows
	LIBRARY_DIR = -I/include -L/lib
	LIBRARY = -lregex
endif

# find all c files
TOP_FILES := $(wildcard *.c)
BACKEND_FILES  = $(wildcard backend/*.c)
#BACKEND_SKYEYE_FILES += $(wildcard backend/skyeye/*.c)
BACKEND_QEMU_FILES += $(wildcard backend/qemu/*.c)
ifeq ($(SYSTEMC4SKYEYE),no) 
BACKEND_SYSTEMC_FILES += $(filter-out backend/systemc/systemc_skyeye%.c, $(wildcard backend/systemc/*.c))
else
BACKEND_SYSTEMC_FILES += $(filter backend/systemc/systemc_skyeye%.c, $(wildcard backend/systemc/*.c))
endif
BACKEND_SYSTEMC_FILES += $(wildcard backend/object_model/*.c)
SPECIAL_FILES = Parser.c Lexer.c

# link all c_files string
C_FILES := $(TOP_FILES) $(BACKEND_FILES) $(BACKEND_QEMU_FILES) $(BACKEND_SKYEYE_FILES) $(SPECIAL_FILES)
#C_SKYEYE_FILES := $(TOP_FILES) $(BACKEND_FILES) $(BACKEND_SKYEYE_FILES) $(SPECIAL_FILES)
C_QEMU_FILES := $(TOP_FILES) $(BACKEND_FILES) $(BACKEND_QEMU_FILES) $(SPECIAL_FILES)
C_SYSTEMC_FILES := $(TOP_FILES) $(BACKEND_FILES) $(BACKEND_SYSTEMC_FILES) $(SPECIAL_FILES)

OBJECTS := $(patsubst %.c,$(BUILD_DIR)/%.o,$(C_FILES))
#OBJECTS_SKYEYE := $(patsubst %.c,$(BUILD_DIR)/skyeye/%.o,$(C_SKYEYE_FILES))
OBJECTS_QEMU := $(patsubst %.c,$(BUILD_DIR)/qemu/%.o,$(C_QEMU_FILES))
OBJECTS_SYSTEMC := $(patsubst %.c,$(BUILD_DIR)/systemc/%.o,$(C_SYSTEMC_FILES))

#all: Makefile.build $(BUILD_DIRS_SKYEYE) $(BUILD_DIRS_QEMU) $(BUILD_DIRS_SYSTEMC) $(TARGETS)
all: Makefile.build $(BUILD_DIRS_QEMU) $(BUILD_DIRS_SYSTEMC) $(TARGETS)
	@echo [ALL] build finished.

#skyeye: Makefile.build $(BUILD_DIRS_SKYEYE) $(TARGET_NAME)_skyeye
#	@echo [skyeye] build finished.

qemu: Makefile.build $(BUILD_DIRS_QEMU) $(TARGET_NAME)_qemu
	@echo [qemu] build finished.

systemc: Makefile.build $(BUILD_DIRS_SYSTEMC) $(TARGET_NAME)_systemc
	@echo [systemc] build finished.

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
sinclude $(OBJECTS:.o=.d)
endif
endif

#$(TARGET_NAME)_skyeye: $(OBJECTS_SKYEYE)
#	@echo [LD] $@
#	@$(CC) $(CFLAGS_SKYEYE) $^ -o $@ $(LIBRARY_DIR) $(LIBRARY)

$(TARGET_NAME)_qemu: $(OBJECTS_QEMU)
	@echo [LD] $@
	@$(CC) $(CFLAGS_QEMU) $^ -o $@ $(LIBRARY_DIR) $(LIBRARY)

$(TARGET_NAME)_systemc: $(OBJECTS_SYSTEMC)
	@echo [LD] $@
	@$(CC) $(CFLAGS_SYSTEMC) $^ -o $@ $(LIBRARY_DIR) $(LIBRARY)

$(BUILD_DIR)/%.d: %.c
	@set -e; rm -f $@
	@$(CC) $(INCLUDE) -MM $(CFLAGS) $< 2>/dev/null | \
		sed 's#^.*:#$(patsubst $(BUILD_DIR)/%.d,$(BUILD_DIR)/qemu/%.o,$@) $(patsubst $(BUILD_DIR)/%.d,$(BUILD_DIR)/systemc/%.o,$@):#' > $@
#		sed 's#^.*:#$(patsubst $(BUILD_DIR)/%.d,$(BUILD_DIR)/skyeye/%.o,$@) $(patsubst $(BUILD_DIR)/%.d,$(BUILD_DIR)/qemu/%.o,$@) $(patsubst $(BUILD_DIR)/%.d,$(BUILD_DIR)/systemc/%.o,$@):#' > $@

#$(BUILD_DIR)/skyeye/%.o: %.c
#	@echo [CC] $@
#	@$(CC) $(CFLAGS_SKYEYE) -c $< -o $@ $(INCLUDE) $(LIBRARY_DIR) $(LIBRARY)

$(BUILD_DIR)/qemu/%.o: %.c
	@echo [CC] $@
	@$(CC) $(CFLAGS_QEMU) -c $< -o $@ $(INCLUDE) $(LIBRARY_DIR) $(LIBRARY)

$(BUILD_DIR)/systemc/%.o: %.c
	@echo [CC] $@
	@$(CC) $(CFLAGS_SYSTEMC) -c $< -o $@ $(INCLUDE) $(LIBRARY_DIR) $(LIBRARY)

Lexer.c: gdml.lex
	@echo [FLEX] $@
	@flex gdml.lex
Lexer.h: gdml.lex
	@echo [FLEX] $@
	@flex gdml.lex

Parser.c: gdml.y
	@echo [BISON] $@
	@bison -d gdml.y
Parser.h: gdml.y
	@echo [BISON] $@
	@bison -d gdml.y

#install: $(TARGET_NAME)_skyeye $(TARGET_NAME)_qemu $(TARGET_NAME)_systemc include/gdml
install: $(TARGET_NAME)_qemu $(TARGET_NAME)_systemc include/gdml
	@echo ===== start install =====
	@echo install $(TARGET_NAME)_skyeye $(TARGET_NAME)_skyeye  $(TARGET_NAME)_systemc [to /usr/bin]
#	@cp -r $(TARGET_NAME)_skyeye /usr/bin
	@cp -r $(TARGET_NAME)_qemu /usr/bin
	@cp -r $(TARGET_NAME)_systemc /usr/bin
	@echo install include/gdml [to /usr/include]
	@cp -r include/gdml /usr/include

#uninstall: /usr/bin/$(TARGET_NAME)_skyeye /usr/bin/$(TARGET_NAME)_qemu $(TARGET_NAME)_systemc /usr/include/gdml
uninstall: /usr/bin/$(TARGET_NAME)_qemu $(TARGET_NAME)_systemc /usr/include/gdml
	@echo ===== start uninstall =====
	@echo uninstall $(TARGET_NAME)_skyeye $(TARGET_NAME)_qemu [from /usr/bin]
	@rm -rf /usr/bin/$(TARGET_NAME)_skyeye /usr/bin/$(TARGET_NAME)_qemu /usr/bin/$(TARGET_NAME)_systemc
	@echo uninstall lib/gdml [from /usr/include]
	@rm -rf /usr/include/gdml

#check: $(TARGET_NAME)_skyeye $(TARGET_NAME)_qemu $(TARGET_NAME)_systemc ../include/gdml output
check: $(TARGET_NAME)_qemu $(TARGET_NAME)_systemc ../include/gdml output
	@echo ===== start check =====
#	./$(TARGET_NAME)_skyeye testcase/simple-device.dml 1>/dev/null
	./$(TARGET_NAME)_qemu testcase/simple-device.dml 1>/dev/null
	./$(TARGET_NAME)_systemc testcase/simple-device.dml 1>/dev/null


../include/gdml:
	cp -r include ../

output:
	mkdir -p output

#$(BUILD_DIRS_SKYEYE):
#	mkdir -p $(BUILD_DIRS_SKYEYE)

$(BUILD_DIRS_QEMU):
	mkdir -p $(BUILD_DIRS_QEMU)

$(BUILD_DIRS_SYSTEMC):
	mkdir -p $(BUILD_DIRS_SYSTEMC)

clean:
	@echo ===== start clean =====
	cd output && make clean
	-rm Parser.* Lexer.* -rf
	-find . -name "*.d" | xargs rm -f
	-find . -name "*.o" | xargs rm -f

distclean: clean
	cd output && make distclean
	-rm dmlc_* tags cscope.* -rf
	-rm build Makefile.build -rf
	-rm Makefile -rf

.PHONY: clean check install uninstall
