// This Software is part of Wind River Simics. The rights to copy, distribute,
// modify, or otherwise make use of this Software may be licensed only
// pursuant to the terms of an applicable Wind River license agreement.
//
// Copyright 2010-2011 Intel Corporation

dml 1.0;

header %{
#include <simics\devs\ethernet.h>
%}

import "simics/util/dbuffer.dml";
import "simics/util/frags.dml";
import "simics/base/time.dml";
import "simics/pywrap.dml";

typedef struct { int (*connect_device)(conf_object_t *_obj, conf_object_t *dev, int *new_connection); void (*disconnect_device)(conf_object_t *_obj, conf_object_t *dev); void (*send_frame)(conf_object_t *_obj, int id, dbuffer_t *frame, int crc_calculated, nano_secs_t delay); void (*auto_negotiate)(conf_object_t *_obj, int id, phy_speed_t speed); void (*add_mac)(conf_object_t *_obj, int id, byte_string_t addr); void (*add_mac_mask)(conf_object_t *_obj, int id, byte_string_t addr, byte_string_t mask); void (*delete_mac)(conf_object_t *_obj, int id, byte_string_t addr); void (*delete_mac_mask)(conf_object_t *_obj, int id, byte_string_t addr, byte_string_t mask); void (*clear_macs)(conf_object_t *_obj, int id); void (*promiscuous_mode)(conf_object_t *_obj, int id, int enable); } ethernet_link_interface_t;
typedef struct { conf_object_t *(*attach)(conf_object_t *link, conf_object_t *clock, ethernet_link_snoop_t snoop_fun, void *user_data); } ethernet_snoop_interface_t;
typedef struct { void (*receive_frame)(conf_object_t *dev, conf_object_t *link, dbuffer_t *frame, int crc_calculated); phy_speed_t (*auto_neg_request)(conf_object_t *dev, phy_speed_t speed); void (*auto_neg_reply)(conf_object_t *dev, phy_speed_t speed); } ethernet_device_interface_t;
typedef struct { void (*link_status)(conf_object_t *ep, int link_up); } ethernet_cable_interface_t;
typedef int eth_frame_crc_status_t;
constant Eth_Frame_CRC_Match = 0;
constant Eth_Frame_CRC_Mismatch = 1;
constant Eth_Frame_CRC_Unknown = 2;
typedef void (*ethernet_link_snoop_t)(void *user_data, conf_object_t *clock, const frags_t *packet, eth_frame_crc_status_t crc_status);
typedef struct { void (*frame)(conf_object_t *obj, const frags_t *frame, eth_frame_crc_status_t crc_status); } ethernet_common_interface_t;
typedef int phy_speed_t;
constant Phy_Speed_10BASE_T = 1;
constant Phy_Speed_10BASE_T_FD = 2;
constant Phy_Speed_100BASE_TX = 4;
constant Phy_Speed_100BASE_T4 = 8;
constant Phy_Speed_100BASE_T2 = 16;
constant Phy_Speed_100BASE_TX_FD = 32;
constant Phy_Speed_100BASE_T2_FD = 64;
constant Phy_Speed_1000BASE_T = 128;
constant Phy_Speed_1000BASE_T_FD = 256;
typedef struct { conf_object_t *(*attach)(conf_object_t *link, conf_object_t *clock, ethernet_link_snoop_t snoop_fun, void *user_data, uint16 vlan_id, int is_vlan_trunk); } ethernet_vlan_snoop_interface_t;
