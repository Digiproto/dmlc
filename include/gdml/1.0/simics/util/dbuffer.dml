// This Software is part of Wind River Simics. The rights to copy, distribute,
// modify, or otherwise make use of this Software may be licensed only
// pursuant to the terms of an applicable Wind River license agreement.
//
// Copyright 2010-2011 Intel Corporation

dml 1.0;

header %{
#include <simics\util\dbuffer.h>
%}

import "simics/base/types.dml";

extern bytes_t dbuffer_bytes(dbuffer_t *dbuffer);
extern const uint8 *dbuffer_read_all(dbuffer_t *dbuffer);
extern const uint8 *dbuffer_read(dbuffer_t *dbuffer, size_t offset, size_t len);
extern const uint8 *dbuffer_read_some(dbuffer_t *dbuffer, size_t offset, size_t len, size_t *actual_len);
extern dbuffer_t *dbuffer_clone(dbuffer_t *dbuffer);
extern dbuffer_t *dbuffer_split(dbuffer_t *dbuffer, size_t offset);
extern dbuffer_t *new_dbuffer(void);
extern uint8 *dbuffer_replace_all(dbuffer_t *dbuffer);
extern uint8 *dbuffer_update_all(dbuffer_t *dbuffer);
extern uint8 *dbuffer_append_value(dbuffer_t *dbuffer, int value, size_t len);
extern uint8 *dbuffer_prepend_value(dbuffer_t *dbuffer, int value, size_t len);
extern uint8 *dbuffer_append_external_data(dbuffer_t *dbuffer, void *data, size_t len, int adopt);
extern uint8 *dbuffer_prepend_external_data(dbuffer_t *dbuffer, void *data, size_t len, int adopt);
extern uint8 *dbuffer_append(dbuffer_t *dbuffer, size_t len);
extern uint8 *dbuffer_prepend(dbuffer_t *dbuffer, size_t len);
extern uint8 *dbuffer_insert(dbuffer_t *dbuffer, size_t offset, size_t len);
extern uint8 *dbuffer_replace(dbuffer_t *dbuffer, size_t offset, size_t len);
extern uint8 *dbuffer_update(dbuffer_t *dbuffer, size_t offset, size_t len);
extern uint8 *dbuffer_replace_some(dbuffer_t *dbuffer, size_t offset, size_t len, size_t *actual_len);
extern uint8 *dbuffer_update_some(dbuffer_t *dbuffer, size_t offset, size_t len, size_t *actual_len);
extern size_t dbuffer_len(const dbuffer_t *dbuffer);
extern void dbuffer_clear(dbuffer_t *dbuffer);
extern void dbuffer_free(dbuffer_t *dbuffer);
extern void dbuffer_set(dbuffer_t *dbuffer, int val, size_t len);
extern void dbuffer_remove(dbuffer_t *dbuffer, size_t offset, size_t remove_len);
extern void dbuffer_remove_head(dbuffer_t *dbuffer, size_t remove_len);
extern void dbuffer_remove_tail(dbuffer_t *dbuffer, size_t remove_len);
extern void dbuffer_copy_append(dbuffer_t *dst, dbuffer_t *src, size_t offset, size_t len);
extern void dbuffer_copy_prepend(dbuffer_t *dst, dbuffer_t *src, size_t offset, size_t len);
extern void dbuffer_append_data(dbuffer_t *buf, const void *data, size_t nmemb);
extern void dbuffer_truncate(dbuffer_t *dbuffer, size_t new_size);
typedef struct { } dbuffer_t;
