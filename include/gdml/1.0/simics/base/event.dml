// This Software is part of Wind River Simics. The rights to copy, distribute,
// modify, or otherwise make use of this Software may be licensed only
// pursuant to the terms of an applicable Wind River license agreement.
//
// Copyright 2010-2011 Intel Corporation

dml 1.0;

header %{
#include <simics\base\event.h>
%}

import "simics/base/types.dml";
import "simics/base/attr-value.dml";
import "simics/base/time.dml";

extern cycles_t SIM_event_find_next_cycle(conf_object_t *clock, event_class_t *evclass, conf_object_t *obj, int (*pred)(void *data, void *match_data), void *match_data);
extern double SIM_event_find_next_time(conf_object_t *clock, event_class_t *evclass, conf_object_t *obj, int (*pred)(void *data, void *match_data), void *match_data);
extern event_class_t *VT_get_event_class(conf_class_t *cl, const char *name);
extern event_class_t *SIM_register_event(const char *name, conf_class_t *cl, event_class_flag_t flags, void (*callback)(conf_object_t *obj, void *data), void (*destroy)(conf_object_t *obj, void *data), attr_value_t (*get_value)(conf_object_t *obj, void *data), void *(*set_value)(conf_object_t *obj, attr_value_t value), char *(*describe)(conf_object_t *obj, void *data));
extern void SIM_event_post_cycle(conf_object_t *clock, event_class_t *evclass, conf_object_t *obj, cycles_t cycles, void *user_data);
extern void SIM_event_post_time(conf_object_t *clock, event_class_t *evclass, conf_object_t *obj, double seconds, void *user_data);
extern void SIM_event_cancel_time(conf_object_t *clock, event_class_t *evclass, conf_object_t *obj, int (*pred)(void *data, void *match_data), void *match_data);
extern void VT_stacked_post(conf_object_t *obj, void (*func)(conf_object_t *obj, void *param), void *user_data);
typedef int event_class_flag_t;
constant Sim_EC_No_Flags = 0;
constant Sim_EC_Notsaved = 1;
constant Sim_EC_Slot_Early = 2;
constant Sim_EC_Slot_Late = 4;
constant Sim_EC_Machine_Sync = 8;
typedef struct { const char *name; conf_class_t *conf_class; event_class_flag_t flags; void (*callback)(conf_object_t *obj, void *data); void (*destroy)(conf_object_t *obj, void *data); attr_value_t (*get_value)(conf_object_t *obj, void *data); void *(*set_value)(conf_object_t *obj, attr_value_t value); char *(*describe)(conf_object_t *obj, void *data); uint32 slot; } event_class_t;
