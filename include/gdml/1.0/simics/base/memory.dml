// This Software is part of Wind River Simics. The rights to copy, distribute,
// modify, or otherwise make use of this Software may be licensed only
// pursuant to the terms of an applicable Wind River license agreement.
//
// Copyright 2010-2011 Intel Corporation

dml 1.0;

header %{
#include <simics\base\memory.h>
%}

import "simics/base/types.dml";

extern const char *VT_describe_pseudo_exception(pseudo_exceptions_t ex);
typedef int read_or_write_t;
constant Sim_RW_Read = 0;
constant Sim_RW_Write = 1;
typedef struct { } page_t;
typedef int endianness_t;
constant Sim_Endian_Target = 0;
constant Sim_Endian_Host_From_BE = 1;
constant Sim_Endian_Host_From_LE = 2;
typedef int addr_space_t;
constant Sim_Addr_Space_Conf = 0;
constant Sim_Addr_Space_IO = 1;
constant Sim_Addr_Space_Memory = 2;
typedef int exception_type_t;
typedef int map_type_t;
constant Sim_Map_Ram = 0;
constant Sim_Map_Rom = 1;
constant Sim_Map_IO = 2;
constant Sim_Map_Port = 3;
constant Sim_Map_Translate = 256;
constant Sim_Map_Translate_To_Space = 257;
constant Sim_Map_Translate_To_Ram = 258;
constant Sim_Map_Translate_To_Rom = 259;
typedef struct { physical_address_t base; physical_address_t start; physical_address_t length; int function; int16 priority; int align_size; swap_mode_t reverse_endian; } map_info_t;
typedef struct { map_type_t map_type; conf_object_t *object; const char *port; const void *interface_ptr; const void *target_interface; const void *breakpoint_interface; const void *breakpoint_query_interface; const void *bridge_interface; conf_object_t *target_object; const char *target_port; conf_object_t *bridge; map_info_t map_info; physical_address_t map_size; int deleted; } map_list_t;
typedef int swap_mode_t;
constant Sim_Swap_None = 0;
constant Sim_Swap_Bus = 1;
constant Sim_Swap_Bus_Trans = 2;
constant Sim_Swap_Trans = 3;
typedef int pseudo_exceptions_t;
constant Sim_PE_No_Exception = 1025;
constant Sim_PE_Silent_Break = 1026;
constant Sim_PE_Stop_Request = 1027;
constant Sim_PE_Inquiry_Outside_Memory = 1028;
constant Sim_PE_Inquiry_Unhandled = 1029;
constant Sim_PE_Execute_Outside_Memory = 1030;
constant Sim_PE_IO_Not_Taken = 1031;
constant Sim_PE_IO_Error = 1032;
constant Sim_PE_Stall_Cpu = 1033;
constant Sim_PE_Instruction_Finished = 1034;
constant Sim_PE_Default_Semantics = 1035;
constant Sim_PE_Ignore_Semantics = 1036;
constant Sim_PE_Last = 1037;

