dml 1.0;
// This file is generated. Do not edit.

extern int SIM_hap_is_active(hap_type_t hap);
extern int SIM_class_has_attribute(conf_class_t *cls, const char *attr);
extern int SIM_object_is_processor(conf_object_t *obj);
extern int SIM_hap_callback_exists(const char *id, obj_hap_func_t func, void *data);
extern int sb_readline(strbuf_t *sb, FILE *f);
extern int SIM_get_batch_mode(void);
extern int SIM_get_quiet(void);
extern int SIM_get_verbose(void);
extern int SIM_initial_configuration_ok(void);
extern int SIM_is_interactive(void);
extern int SIM_simics_is_running(void);
extern bool VT_is_saving_persistent_data(void);
extern attr_attr_t SIM_get_attribute_attributes(conf_class_t *cls, const char *attr);
extern attr_value_t SIM_attr_copy(attr_value_t val);
extern attr_value_t SIM_get_class_attribute(conf_class_t *cls, const char *name);
extern attr_value_t SIM_get_class_attribute_idx(conf_class_t *cls, const char *name, attr_value_t *index);
extern attr_value_t SIM_get_attribute(conf_object_t *obj, const char *name);
extern attr_value_t SIM_get_attribute_idx(conf_object_t *obj, const char *name, attr_value_t *index);
extern attr_value_t SIM_call_python_function(const char *func, attr_value_t *args);
extern attr_value_t SIM_run_command(const char *line);
extern attr_value_t SIM_run_python(const char *line);
extern attr_value_t SIM_make_attr_string(const char *str);
extern attr_value_t SIM_get_mem_op_value_buf(generic_transaction_t *mop);
extern attr_value_t SIM_make_attr_data(size_t size, const void *data);
extern attr_value_t SIM_alloc_attr_dict(uint32 length);
extern attr_value_t SIM_alloc_attr_list(uint32 length);
extern attr_value_t SIM_make_attr_list(uint32 length, ...);
extern attr_value_t SIM_get_all_classes(void);
extern attr_value_t SIM_get_all_failed_modules(void);
extern attr_value_t SIM_get_all_hap_types(void);
extern attr_value_t SIM_get_all_modules(void);
extern attr_value_t SIM_get_all_objects(void);
extern attr_value_t SIM_get_all_processors(void);
extern attr_value_t SIM_get_directories(void);
extern breakpoint_id_t SIM_breakpoint(conf_object_t *obj, breakpoint_kind_t type, access_t access, uint64 address, uint64 length, uint32 flags);
extern cycles_t SIM_cycle_count(conf_object_t *obj);
extern cycles_t SIM_stall_count(conf_object_t *obj);
extern cycles_t SIM_stalled_until(conf_object_t *obj);
extern cycles_t VT_old_time_next_occurrence(conf_object_t *obj, void (*func)(conf_object_t *obj, void *param), void *user_data);
extern double SIM_time(conf_object_t *obj);
extern hap_handle_t SIM_hap_add_callback(const char *hap, obj_hap_func_t func, void *data);
extern hap_handle_t SIM_hap_add_callback_index(const char *hap, obj_hap_func_t func, void *data, integer_t index);
extern hap_handle_t SIM_hap_add_callback_range(const char *hap, obj_hap_func_t func, void *data, integer_t start, integer_t end);
extern hap_handle_t SIM_hap_add_callback_obj(const char *hap, conf_object_t *obj, hap_flags_t flags, obj_hap_func_t func, void *data);
extern hap_handle_t SIM_hap_add_callback_obj_index(const char *hap, conf_object_t *obj, hap_flags_t flags, obj_hap_func_t func, void *data, integer_t index);
extern hap_handle_t SIM_hap_add_callback_obj_range(const char *hap, conf_object_t *obj, hap_flags_t flags, obj_hap_func_t func, void *data, integer_t start, integer_t end);
extern hap_type_t SIM_hap_get_number(const char *hap);
extern hap_type_t SIM_hap_add_type(const char *hap, const char *params, const char *param_desc, const char *index, const char *desc, int unused);
extern int SIM_delete_objects(attr_value_t object_list);
extern int SIM_c_hap_occurred(hap_type_t hap, conf_object_t *obj, integer_t value, ...);
extern int SIM_c_hap_occurred_always(hap_type_t hap, conf_object_t *obj, integer_t value, ...);
extern int SIM_hap_occurred(hap_type_t hap, conf_object_t *obj, integer_t value, attr_value_t *list);
extern int SIM_hap_occurred_always(hap_type_t hap, conf_object_t *obj, integer_t value, attr_value_t *list);
extern int SIM_putchar(int c);
extern int SIM_cancel_realtime_event(integer_t id);
extern int SIM_ascanf(attr_value_t *list, const char *fmt, ...);
extern int SIM_change_attribute_attribute(conf_class_t *cls, const char *name, attr_attr_t attr);
extern int SIM_register_typed_attribute(conf_class_t *cls, const char *name, get_attr_t get_attr, void *user_data_get, set_attr_t set_attr, void *user_data_set, attr_attr_t attr, const char *type, const char *idx_type, const char *desc);
extern int SIM_register_typed_class_attribute(conf_class_t *cls, const char *name, get_class_attr_t get_attr, void *user_data_get, set_class_attr_t set_attr, void *user_data_set, attr_attr_t attr, const char *type, const char *idx_type, const char *desc);
extern int SIM_register_interface(conf_class_t *cls, const char *name, const interface_t *iface);
extern int SIM_register_port_interface(conf_class_t *cls, const char *name, const interface_t *iface, const char *instance_name, const char *desc);
extern int SIM_register_clock(conf_class_t *cls, const cycle_interface_t *iface);
extern int SIM_processor_privilege_level(conf_object_t *cpu);
extern int SIM_delete_object(conf_object_t *obj);
extern int SIM_write_configuration_to_file(const char *file);
extern int SIM_printf(const char *format, ...);
extern int SIM_puts(const char *s);
extern int SIM_get_processor_number(const conf_object_t *cpu);
extern int sb_write(const strbuf_t *sb, FILE *f);
extern int SIM_write(const void *src, int length);
extern int SIM_process_work(int (*done)(void *done_data), void *done_data);
extern int SIM_flush(void);
extern int SIM_number_processors(void);
extern int SIM_process_pending_work(void);
extern integer_t SIM_realtime_event(uint32 delay_ms, void (*callback)(void *data), void *data, int run_in_thread, const char *desc);
extern pc_step_t SIM_continue(integer_t steps);
extern pc_step_t SIM_step_count(conf_object_t *obj);
extern pc_step_t VT_old_step_next_occurrence(conf_object_t *obj, void (*func)(conf_object_t *obj, void *param), void *user_data);
extern physical_address_t SIM_load_binary(conf_object_t *obj, const char *file, physical_address_t offset, int use_pa, int verbose);
extern char *SIM_lookup_file(const char *file);
extern char *SIM_native_path(const char *path);
extern char *sb_detach(strbuf_t *sb);
extern class_interface_t *SIM_c_get_class_interface(const conf_class_t *cls, const char *name);
extern class_interface_t *SIM_get_class_interface(const conf_class_t *cls, const char *name);
extern class_interface_t *SIM_c_get_class_port_interface(const conf_class_t *cls, const char *name, const char *instance_name);
extern class_interface_t *SIM_get_class_port_interface(const conf_class_t *cls, const char *name, const char *instance_name);
extern conf_class_t *SIM_get_class(const char *name);
extern conf_class_t *SIM_register_class(const char *name, const class_data_t *class_data);
extern conf_object_t *SIM_get_processor(int proc_no);
extern conf_object_t *SIM_create_object(conf_class_t *cls, const char *name, attr_value_t attrs);
extern conf_object_t *SIM_get_object(const char *name);
extern conf_object_t *SIM_current_processor(void);
extern conf_object_t *VT_first_clock(void);
extern const char *SIM_hap_get_name(hap_type_t hap);
extern const char *SIM_get_mem_op_type_name(mem_op_type_t type);
extern const char *SIM_license_file(const char *format);
extern const char *SIM_get_class_name(const conf_class_t *class_data);
extern const char *SIM_get_configuration_file_prefix(void);
extern const char *SIM_last_error(void);
extern const char *SIM_readme(void);
extern const char *SIM_version(void);
extern const char *SIM_version_base(void);
extern const char *SIM_version_major(void);
extern const uint8 *dbuffer_read_all(dbuffer_t *dbuffer);
extern const uint8 *dbuffer_read(dbuffer_t *dbuffer, size_t offset, size_t len);
extern const uint8 *dbuffer_read_some(dbuffer_t *dbuffer, size_t offset, size_t len, size_t *actual_len);
extern dbuffer_t *dbuffer_clone(dbuffer_t *dbuffer);
extern dbuffer_t *dbuffer_split(dbuffer_t *dbuffer, size_t offset);
extern dbuffer_t *new_dbuffer(void);
extern interface_t *SIM_c_get_interface(const conf_object_t *obj, const char *name);
extern interface_t *SIM_get_interface(const conf_object_t *obj, const char *name);
extern interface_t *SIM_c_get_port_interface(const conf_object_t *obj, const char *name, const char *instance_name);
extern interface_t *SIM_get_port_interface(const conf_object_t *obj, const char *name, const char *instance_name);
extern uint8 *dbuffer_replace_all(dbuffer_t *dbuffer);
extern uint8 *dbuffer_update_all(dbuffer_t *dbuffer);
extern uint8 *dbuffer_append_value(dbuffer_t *dbuffer, int value, size_t len);
extern uint8 *dbuffer_prepend_value(dbuffer_t *dbuffer, int value, size_t len);
extern uint8 *dbuffer_append_external_data(dbuffer_t *dbuffer, void *data, size_t len, int adopt);
extern uint8 *dbuffer_prepend_external_data(dbuffer_t *dbuffer, void *data, size_t len, int adopt);
extern uint8 *dbuffer_append(dbuffer_t *dbuffer, size_t len);
extern uint8 *dbuffer_prepend(dbuffer_t *dbuffer, size_t len);
extern uint8 *dbuffer_insert(dbuffer_t *dbuffer, size_t offset, size_t len);
extern uint8 *dbuffer_replace(dbuffer_t *dbuffer, size_t offset, size_t len);
extern uint8 *dbuffer_update(dbuffer_t *dbuffer, size_t offset, size_t len);
extern uint8 *dbuffer_replace_some(dbuffer_t *dbuffer, size_t offset, size_t len, size_t *actual_len);
extern uint8 *dbuffer_update_some(dbuffer_t *dbuffer, size_t offset, size_t len, size_t *actual_len);
extern set_error_t SIM_set_class_attribute_idx(conf_class_t *cls, const char *name, attr_value_t *index, attr_value_t *value);
extern set_error_t SIM_set_class_attribute(conf_class_t *cls, const char *name, attr_value_t *value);
extern set_error_t SIM_set_attribute_idx(conf_object_t *obj, const char *name, attr_value_t *index, attr_value_t *value);
extern set_error_t SIM_set_attribute(conf_object_t *obj, const char *name, attr_value_t *value);
extern sim_exception_t SIM_clear_exception(void);
extern sim_exception_t SIM_get_pending_exception(void);
extern size_t dbuffer_len(const dbuffer_t *dbuffer);
extern strbuf_t sb_newf(const char *format, ...);
extern strbuf_t sb_new(const char *s);
extern tuple_int_string_t SIM_disassemble_address(conf_object_t *cpu, generic_address_t address, int logical, int sub);
extern uint64 SIM_read_phys_memory_tags(conf_object_t *mem_space, physical_address_t paddr, uint32 ntags);
extern uint8 SIM_read_byte(conf_object_t *obj, generic_address_t paddr);
extern uinteger_t SIM_read_phys_memory(conf_object_t *cpu, physical_address_t paddr, int length);
extern uinteger_t SIM_get_mem_op_value_be(generic_transaction_t *mop);
extern uinteger_t SIM_get_mem_op_value_cpu(generic_transaction_t *mop);
extern uinteger_t SIM_get_mem_op_value_le(generic_transaction_t *mop);
extern uint32 SIM_log_level(const log_object_t *obj);
extern void SIM_set_quiet(int quiet);
extern void SIM_set_verbose(int verbose);
extern void SIM_set_configuration(attr_value_t conf);
extern void SIM_free_attribute(attr_value_t value);
extern void SIM_delete_breakpoint(breakpoint_id_t id);
extern void SIM_quit(int exit_code);
extern void SIM_notify_on_descriptor(int fd, notify_mode_t mode, int run_in_thread, void (*callback)(void *data), void *data);
extern void SIM_breakpoint_remove(int id, access_t access, generic_address_t address, generic_address_t length);
extern void SIM_log_info(int lvl, log_object_t *dev, int grp, const char *str, ...);
extern void SIM_log_spec_violation(int lvl, log_object_t *dev, int grp, const char *str, ...);
extern void SIM_log_undefined(int lvl, log_object_t *dev, int grp, const char *str, ...);
extern void SIM_log_unimplemented(int lvl, log_object_t *dev, int grp, const char *str, ...);
extern void SIM_notify_on_socket(int sock, notify_mode_t mode, int run_in_thread, void (*callback)(void *data), void *data);
extern void SIM_add_output_handler(output_handler_t func, void *user_data);
extern void SIM_remove_output_handler(output_handler_t func, void *user_data);
extern void SIM_attr_list_set_item(attr_value_t *attr, uint32 index, attr_value_t elem);
extern void SIM_attr_dict_set_item(attr_value_t *attr, uint32 index, attr_value_t key, attr_value_t value);
extern void SIM_attr_dict_resize(attr_value_t *attr, uint32 newsize);
extern void SIM_attr_list_resize(attr_value_t *attr, uint32 newsize);
extern void SIM_attr_free(attr_value_t *value);
extern void SIM_ensure_partial_attr_order(conf_class_t *cls, const char *attr1, const char *attr2);
extern void SIM_STC_flush_cache(conf_object_t *cpu);
extern void SIM_reset_processor(conf_object_t *cpu, int hard_reset);
extern void SIM_flush_D_STC_logical(conf_object_t *cpu, logical_address_t vaddr, logical_address_t length);
extern void SIM_flush_I_STC_logical(conf_object_t *cpu, logical_address_t vaddr, logical_address_t length);
extern void SIM_flush_I_STC_physical(conf_object_t *cpu, physical_address_t paddr, physical_address_t length);
extern void SIM_flush_D_STC_physical(conf_object_t *cpu, physical_address_t paddr, physical_address_t length, read_or_write_t read_or_write);
extern void SIM_write_phys_memory(conf_object_t *cpu, physical_address_t paddr, uinteger_t value, int length);
extern void VT_time_post_cycle(conf_object_t *cpu, conf_object_t *poster, cycles_t delta, sync_t sync, void (*func)(conf_object_t *obj, void *param), void *arg);
extern void VT_step_post(conf_object_t *cpu, conf_object_t *poster, pc_step_t steps, void (*func)(conf_object_t *obj, void *param), void *user_data);
extern void VT_step_clean(conf_object_t *cpu, conf_object_t *poster, void (*func)(conf_object_t *obj, void *param), void *user_data);
extern void VT_time_clean(conf_object_t *cpu, conf_object_t *poster, sync_t sync, void (*func)(conf_object_t *obj, void *param), void *user_data);
extern void SIM_write_phys_memory_tags(conf_object_t *mem_space, physical_address_t paddr, uint64 tag_bits, uint32 ntags);
extern void SIM_flush_cell_caches(conf_object_t *obj);
extern void SIM_require_object(conf_object_t *obj);
extern void SIM_stall_cycle(conf_object_t *obj, cycles_t cycles);
extern void VT_old_time_post_cycle(conf_object_t *obj, cycles_t cycles, sync_t sync, void (*func)(conf_object_t *obj, void *param), void *user_data);
extern void SIM_stall(conf_object_t *obj, double seconds);
extern void VT_old_time_post(conf_object_t *obj, double seconds, sync_t sync, void (*func)(conf_object_t *obj, void *param), void *user_data);
extern void SIM_write_byte(conf_object_t *obj, generic_address_t paddr, uint8 value);
extern void SIM_log_message(conf_object_t *obj, int level, int group_ids, log_type_t log_type, const char *message);
extern void SIM_break_cycle(conf_object_t *obj, integer_t cycles);
extern void SIM_break_step(conf_object_t *obj, integer_t steps);
extern void VT_old_step_post(conf_object_t *obj, pc_step_t steps, void (*func)(conf_object_t *obj, void *param), void *user_data);
extern void SIM_load_file(conf_object_t *obj, const char *file, physical_address_t paddr, int verbose);
extern void SIM_run_unrestricted(conf_object_t *obj, void (*func)(conf_object_t *obj, void *param), void *user_data);
extern void SIM_stacked_post(conf_object_t *obj, void (*func)(conf_object_t *obj, void *param), void *user_data);
extern void VT_stacked_post(conf_object_t *obj, void (*func)(conf_object_t *obj, void *param), void *user_data);
extern void VT_old_step_clean(conf_object_t *obj, void (*func)(conf_object_t *obj, void *param), void *user_data);
extern void VT_old_time_clean(conf_object_t *obj, sync_t sync, void (*func)(conf_object_t *obj, void *param), void *user_data);
extern void SIM_register_class_alias(const char *alias, const char *name);
extern void SIM_add_directory(const char *directory, int prepend);
extern void SIM_read_configuration(const char *file);
extern void SIM_source_python(const char *file);
extern void SIM_run_command_file(const char *file, int _local);
extern void SIM_source_python_in_module(const char *file, const char *module);
extern void SIM_hap_remove_type(const char *hap);
extern void SIM_hap_delete_callback_id(const char *hap, hap_handle_t handle);
extern void SIM_hap_delete_callback(const char *hap, obj_hap_func_t func, void *data);
extern void SIM_hap_delete_callback_obj_id(const char *hap, conf_object_t *obj, hap_handle_t handle);
extern void SIM_hap_delete_callback_obj(const char *hap, conf_object_t *obj, obj_hap_func_t func, void *data);
extern void SIM_load_module(const char *module);
extern void SIM_unload_module(const char *module);
extern void SIM_attribute_error(const char *msg);
extern void SIM_break_message(const char *msg);
extern void SIM_break_simulation(const char *msg);
extern void SIM_set_prompt(const char *prompt);
extern void SIM_register_copyright(const char *str);
extern void dbuffer_clear(dbuffer_t *dbuffer);
extern void dbuffer_free(dbuffer_t *dbuffer);
extern void dbuffer_set(dbuffer_t *dbuffer, int val, size_t len);
extern void dbuffer_remove(dbuffer_t *dbuffer, size_t offset, size_t remove_len);
extern void dbuffer_remove_head(dbuffer_t *dbuffer, size_t remove_len);
extern void dbuffer_remove_tail(dbuffer_t *dbuffer, size_t remove_len);
extern void dbuffer_copy_append(dbuffer_t *dst, dbuffer_t *src, size_t offset, size_t len);
extern void dbuffer_copy_prepend(dbuffer_t *dst, dbuffer_t *src, size_t offset, size_t len);
extern void SIM_for_all_memory_pages(void (*f)(integer_t), int d_or_i);
extern void SIM_register_work(void (*f)(void *data), void *data);
extern void SIM_run_alone(void (*f)(void *data), void *data);
extern void SIM_thread_safe_callback(void (*f)(void *data), void *data);
extern void SIM_set_mem_op_value_buf(generic_transaction_t *mop, attr_value_t value);
extern void SIM_c_get_mem_op_value_buf(generic_transaction_t *mop, uint8 *dst);
extern void SIM_c_set_mem_op_value_buf(generic_transaction_t *mop, uint8 *src);
extern void SIM_set_mem_op_value_be(generic_transaction_t *mop, uinteger_t value);
extern void SIM_set_mem_op_value_cpu(generic_transaction_t *mop, uinteger_t value);
extern void SIM_set_mem_op_value_le(generic_transaction_t *mop, uinteger_t value);
extern void SIM_log_error(log_object_t *dev, int grp, const char *str, ...);
extern void SIM_set_log_level(log_object_t *obj, uint32 level);
extern void SIM_add_configuration(pre_conf_object_set_t *object_list, const char *file);
extern void sb_free(strbuf_t *sb);
extern void sb_addesc(strbuf_t *sb, char c, char delim);
extern void sb_addfmt(strbuf_t *sb, const char *format, ...);
extern void sb_fmt(strbuf_t *sb, const char *format, ...);
extern void sb_realloc(strbuf_t *sb, uint32 minlen);
extern void SIM_set_frontend_context(void *context);
extern void SIM_frontend_exception(sim_exception_t exc_type, const char *str);
extern void SIM_clear_directories(void);
extern void SIM_copyright(void);
extern void SIM_flush_all_caches(void);
extern void SIM_init_command_line(void);
extern void SIM_license(void);
extern void SIM_main_loop(void);
extern void SIM_module_list_refresh(void);
extern int SIM_attr_boolean(attr_value_t attr);
extern bool SIM_attr_is_boolean(attr_value_t attr);
extern bool SIM_attr_is_data(attr_value_t attr);
extern bool SIM_attr_is_dict(attr_value_t attr);
extern bool SIM_attr_is_floating(attr_value_t attr);
extern bool SIM_attr_is_integer(attr_value_t attr);
extern bool SIM_attr_is_invalid(attr_value_t attr);
extern bool SIM_attr_is_list(attr_value_t attr);
extern bool SIM_attr_is_nil(attr_value_t attr);
extern bool SIM_attr_is_object(attr_value_t attr);
extern bool SIM_attr_is_string(attr_value_t attr);
extern int frags_it_end(frags_it_t it);
extern bool SIM_object_is_configured(const conf_object_t *obj);
extern bool SIM_mem_op_is_control(const generic_transaction_t *mop);
extern bool SIM_mem_op_is_data(const generic_transaction_t *mop);
extern bool SIM_mem_op_is_from_cache(const generic_transaction_t *mop);
extern bool SIM_mem_op_is_from_cpu(const generic_transaction_t *mop);
extern bool SIM_mem_op_is_from_device(const generic_transaction_t *mop);
extern bool SIM_mem_op_is_instruction(const generic_transaction_t *mop);
extern bool SIM_mem_op_is_prefetch(const generic_transaction_t *mop);
extern bool SIM_mem_op_is_read(const generic_transaction_t *mop);
extern bool SIM_mem_op_is_write(const generic_transaction_t *mop);
extern bool SIM_mem_op_is_from_cpu_arch(const generic_transaction_t *mop, ini_type_t arch);
extern int SIM_get_mem_op_ignore(generic_transaction_t *mop);
extern int SIM_get_mem_op_inquiry(generic_transaction_t *mop);
extern bool SIM_mem_op_is_atomic(generic_transaction_t *mop);
extern int SIM_mem_op_may_stall(generic_transaction_t *mop);
extern attr_value_t SIM_make_attr_boolean(int b);
extern attr_value_t SIM_attr_dict_key(attr_value_t attr, uint32 index);
extern attr_value_t SIM_attr_dict_value(attr_value_t attr, uint32 index);
extern attr_value_t SIM_attr_list_item(attr_value_t attr, uint32 index);
extern attr_value_t SIM_make_attr_floating(double d);
extern attr_value_t SIM_make_attr_integer(integer_t i);
extern attr_value_t SIM_make_attr_object(conf_object_t *obj);
extern attr_value_t SIM_make_attr_string_adopt(const char *str);
extern attr_value_t SIM_make_attr_data_adopt(size_t size, void *data);
extern attr_value_t SIM_make_attr_invalid(void);
extern attr_value_t SIM_make_attr_nil(void);
extern char sb_char(const strbuf_t *sb, int i);
extern double SIM_attr_floating(attr_value_t attr);
extern exception_type_t SIM_get_mem_op_exception(generic_transaction_t *mop);
extern frags_it_t frags_it_next(frags_it_t it);
extern frags_it_t frags_it(const frags_t *buf, size_t offset, size_t len);
extern frags_t frags_suffix(const frags_t *body, void *header, size_t header_len);
extern frags_t frags_prefix(const void *header, size_t header_len, const frags_t *body);
extern ini_type_t SIM_get_mem_op_ini_type(generic_transaction_t *mop);
extern int sb_len(const strbuf_t *sb);
extern integer_t SIM_attr_integer(attr_value_t attr);
extern logical_address_t SIM_get_mem_op_virtual_address(generic_transaction_t *mop);
extern mem_op_type_t SIM_get_mem_op_type(const generic_transaction_t *mop);
extern physical_address_t SIM_get_mem_op_physical_address(generic_transaction_t *mop);
extern attr_value_t *SIM_attr_list(attr_value_t attr);
extern char *SIM_attr_string_detach(attr_value_t *attr);
extern char *sb_str(const strbuf_t *sb);
extern conf_class_t *SIM_object_class(const conf_object_t *obj);
extern conf_object_t *SIM_attr_object(attr_value_t attr);
extern conf_object_t *SIM_object_clock(const conf_object_t *obj);
extern conf_object_t *SIM_get_mem_op_initiator(generic_transaction_t *mop);
extern const char *SIM_attr_string(attr_value_t attr);
extern const char *SIM_object_name(const conf_object_t *obj);
extern const uint8 *frags_it_data(frags_it_t it);
extern void *SIM_instance_data(const conf_object_t *obj);
extern void *SIM_attr_data(attr_value_t attr);
extern void *frags_extract_alloc(const frags_t *buf);
extern void *frags_extract_slice_alloc(const frags_t *buf, size_t offset, size_t len);
extern void *SIM_get_mem_op_user_data(generic_transaction_t *mop);
extern size_t frags_it_len(frags_it_t it);
extern size_t frags_len(const frags_t *buf);
extern strbuf_t sb_dup(const strbuf_t *sb);
extern uint16 frags_extract_be16(const frags_t *buf, size_t offset);
extern uint16 frags_extract_le16(const frags_t *buf, size_t offset);
extern uint32 frags_extract_be32(const frags_t *buf, size_t offset);
extern uint32 frags_extract_le32(const frags_t *buf, size_t offset);
extern uint64 frags_extract_be64(const frags_t *buf, size_t offset);
extern uint64 frags_extract_le64(const frags_t *buf, size_t offset);
extern uint8 frags_extract_8(const frags_t *buf, size_t offset);
extern uint32 SIM_attr_data_size(attr_value_t attr);
extern uint32 SIM_attr_dict_size(attr_value_t attr);
extern uint32 SIM_attr_list_size(attr_value_t attr);
extern uint32 SIM_get_mem_op_page_cross(generic_transaction_t *mop);
extern uint32 SIM_get_mem_op_size(generic_transaction_t *mop);
extern void SIM_set_object_configured(conf_object_t *obj);
extern void frags_extract(const frags_t *buf, void *vdst);
extern void frags_extract_slice(const frags_t *buf, void *vdst, size_t offset, size_t len);
extern void dbuffer_append_data(dbuffer_t *buf, const void *data, size_t nmemb);
extern void dbuffer_truncate(dbuffer_t *dbuffer, size_t new_size);
extern void frags_init(frags_t *buf);
extern void frags_add(frags_t *buf, const void *data, size_t len);
extern void frags_init_add(frags_t *buf, const void *data, size_t len);
extern void frags_add_from_frags(frags_t *dst, const frags_t *src, size_t offset, size_t len);
extern void frags_init_add_from_frags(frags_t *dst, const frags_t *src, size_t offset, size_t len);
extern void SIM_mem_op_ensure_future_visibility(generic_transaction_t *mop);
extern void SIM_set_mem_op_reissue(generic_transaction_t *mop);
extern void SIM_set_mem_op_ignore(generic_transaction_t *mop, int ignore);
extern void SIM_set_mem_op_inquiry(generic_transaction_t *mop, int inquiry);
extern void SIM_set_mem_op_exception(generic_transaction_t *mop, exception_type_t exc);
extern void SIM_set_mem_op_initiator(generic_transaction_t *mop, ini_type_t type, conf_object_t *obj);
extern void SIM_set_mem_op_virtual_address(generic_transaction_t *mop, logical_address_t va);
extern void SIM_set_mem_op_type(generic_transaction_t *mop, mem_op_type_t type);
extern void SIM_set_mem_op_physical_address(generic_transaction_t *mop, physical_address_t pa);
extern void SIM_set_mem_op_user_data(generic_transaction_t *mop, void *data);
extern void SIM_set_mem_op_size(generic_transaction_t *mop, uint32 size);
extern void sb_copy(strbuf_t *dst, const strbuf_t *src);
extern void sb_clear(strbuf_t *sb);
extern void sb_init(strbuf_t *sb);
extern void sb_addc(strbuf_t *sb, char c);
extern void sb_delete(strbuf_t *sb, int start, uint32 n);
extern void sb_addstr(strbuf_t *sb, const char *str);
extern void sb_set(strbuf_t *sb, const char *str);
extern void sb_addmem(strbuf_t *sb, const char *str, uint32 len);
extern void sb_extend(strbuf_t *sb, uint32 minlen);
extern void sb_addchars(strbuf_t *sb, uint32 n, char c);
extern void sb_resize(strbuf_t *sb, uint32 size);
extern void sb_insertstr(strbuf_t *sb, uint32 start, const char *str);
extern void sb_insertmem(strbuf_t *sb, uint32 start, const char *str, uint32 n);
extern void sb_cat(strbuf_t *sb1, const strbuf_t *sb2);
typedef struct { char *s; uint32 size; uint32 len; } strbuf_t;
typedef struct { void (*set_min_latency)(conf_object_t *link, global_time_diff_t latency); } link_interface_t;
typedef uint32 register_id_t;
typedef struct { void (*add_to_STC_v9)(conf_object_t *cpu, logical_address_t la, physical_address_t pa, read_or_write_t rw, data_or_instr_t di, int context, int priv); void (*flush_DSTC_logical_v9)(conf_object_t *cpu, int context, logical_address_t la, logical_address_t size); void (*update_STC_mode_v9)(conf_object_t *cpu); } stc_v9_interface_t;
typedef struct { conf_object_t *(*new_instance)(parse_object_t *parse_obj); void (*finalize_instance)(conf_object_t *obj); void (*pre_delete_instance)(conf_object_t *obj); int (*delete_instance)(conf_object_t *obj); attr_value_t (*default_get_attr)(const char *name, conf_object_t *obj, attr_value_t *idx); set_error_t (*default_set_attr)(const char *name, conf_object_t *obj, attr_value_t *val, attr_value_t *idx); const char *description; const char *class_desc; class_kind_t kind; } class_data_t;
typedef int attr_attr_t;
constant Sim_Attr_Required = 0;
constant Sim_Attr_Optional = 1;
constant Sim_Attr_Session = 3;
constant Sim_Attr_Pseudo = 4;
constant Sim_Attr_Flag_Mask = 255;
constant Sim_Init_Phase_Shift = 8;
extern attr_attr_t Sim_Init_Phase_0;
extern attr_attr_t Sim_Init_Phase_1;
extern attr_attr_t Sim_Init_Phase_Bits;
extern attr_attr_t Sim_Init_Phase_Mask;
extern attr_attr_t Sim_Init_Phase_Pre1;
extern attr_attr_t Sim_Attr_Class;
extern attr_attr_t Sim_Attr_Internal;
extern attr_attr_t Sim_Attr_Doc;
extern attr_attr_t Sim_Attr_Integer_Indexed;
extern attr_attr_t Sim_Attr_String_Indexed;
extern attr_attr_t Sim_Attr_List_Indexed;
extern attr_attr_t Sim_Attr_Persistent;
extern attr_attr_t Sim_Attr_Read_Only;
extern attr_attr_t Sim_Attr_Write_Only;
typedef void (*dma_set_interrupt_t)(conf_object_t *);
typedef struct { uint64 (*attach)(conf_object_t *link, conf_object_t *dev, const char *devport); void (*detach)(conf_object_t *link, uint64 cookie); void (*send_frame)(conf_object_t *link, uint64 cookie, const frags_t *frame); uint64 (*attach_snoop)(conf_object_t *link, conf_object_t *clock, ethernet_link_snoop_t snoop_fun, void *user_data); } ethernet_common_link_interface_t;
typedef struct { uint64 (*read_fp_register_x)(conf_object_t *cpu, int reg); double (*read_fp_register_d)(conf_object_t *cpu, int reg); void (*load_rom)(conf_object_t *cpu, const char *file_name, int64 address, int verbose_flag); int (*number_of_iprs)(conf_object_t *cpu); int (*ipr_index)(conf_object_t *cpu, const char *name); int (*ipr_number_to_index)(conf_object_t *cpu, int number); const char *(*ipr_name)(conf_object_t *cpu, int index); const char *(*ipr_description)(conf_object_t *cpu, int index); uint64 (*read_ipr)(conf_object_t *cpu, int index); void (*write_ipr)(conf_object_t *cpu, int index, uint64 value); } alpha_interface_t;
typedef int sparc_access_type_t;
constant V9_Access_Normal = 0;
constant V9_Access_Normal_FP = 1;
constant V9_Access_Double_FP = 2;
constant V9_Access_Short_FP = 3;
constant V9_Access_FSR = 4;
constant V9_Access_Atomic = 5;
constant V9_Access_Atomic_Load = 6;
constant V9_Access_Prefetch = 7;
constant V9_Access_Partial_Store = 8;
constant V9_Access_Ldd_Std_1 = 9;
constant V9_Access_Ldd_Std_2 = 10;
constant V9_Access_Block = 11;
constant V9_Access_Internal1 = 12;
typedef void (*interrupt_cpu_t)(conf_object_t *cpu, conf_object_t *obj, int source_mid, int target_mid, interrupt_ack_t irq_ack_cb, uint64 *data, void *usr, int dummy1, int dummy2);
typedef int ppc_mc_exc_t;
constant Sim_PPC_Generic_MC = 0;
constant Sim_PPC_MC_TEA = 1;
constant Sim_PPC_MC_MCP = 2;
constant Sim_PPC_Bus_Address_Parity = 3;
constant Sim_PPC_Bus_Data_Parity = 4;
constant Sim_PPC_Instruction_Cache_Parity = 5;
constant Sim_PPC_Data_Cache_Parity = 6;
constant Sim_PPC_L2_Data_Parity = 7;
constant Sim_PPC_L3_Data_Parity = 8;
constant Sim_PPC_L3_Address_Parity = 9;
constant Sim_PPC970_Data_Cache_Parity = 10;
constant Sim_PPC970_Data_Cache_Tag_Parity = 11;
constant Sim_PPC970_D_ERAT_Parity = 12;
constant Sim_PPC970_TLB_Parity = 13;
constant Sim_PPC970_SLB_Parity = 14;
constant Sim_PPC970_L2_Load_ECC_Parity = 15;
constant Sim_PPC970_L2_Page_Table_ECC_Parity = 16;
constant Sim_PPC970_Uncacheable_Load_Parity = 17;
constant Sim_PPC970_MC_External = 18;
typedef struct {  } conf_class_t;
typedef struct { void (*send_word)(conf_object_t *bus, uint32 word, int parity_ok); } arinc429_bus_interface_t;
typedef struct { void (*receive_frame)(conf_object_t *dev, conf_object_t *link, dbuffer_t *frame); } generic_message_device_interface_t;
typedef int usb_type_t;
constant USB_Type_Control = 0;
constant USB_Type_Interrupt = 1;
constant USB_Type_Isochronous = 2;
constant USB_Type_Bulk = 3;
typedef struct { int valid; uint32 address; } arm_avic_t;
typedef struct { pc_step_t (*get_halt_steps)(conf_object_t *obj); void (*set_halt_steps)(conf_object_t *obj, pc_step_t steps); pc_step_t (*get_ffwd_steps)(conf_object_t *obj); void (*set_ffwd_steps)(conf_object_t *obj, pc_step_t steps); } step_info_interface_t;
typedef struct { void (*set_interrupt_mode)(conf_object_t *cpu, int mode); void (*raise_interrupt)(conf_object_t *cpu, int vector, int priority, h8_interrupt_type_t type); void (*lower_interrupt)(conf_object_t *cpu, int vector, int priority, h8_interrupt_type_t type); } h8_interrupt_interface_t;
typedef struct { interrupt_query_enabled_t is_enabled; interrupt_query_register_t register_callback; } interrupt_query_interface_t;
typedef struct { void (*set)(conf_object_t *obj, uint64 numerator, uint64 denominator); } scale_factor_listener_interface_t;
typedef int firewire_response_code_t;
constant Firewire_Response_Complete = 0;
constant Firewire_Response_Data_Error = 5;
constant Firewire_Response_Type_Error = 6;
constant Firewire_Response_Address_Error = 7;
typedef struct { attr_value_t (*run)(conf_object_t *obj); attr_value_t (*finish_function)(conf_object_t *obj); attr_value_t (*next_line)(conf_object_t *obj); attr_value_t (*next_instruction)(conf_object_t *obj); attr_value_t (*step_line)(conf_object_t *obj); attr_value_t (*step_instruction)(conf_object_t *obj); attr_value_t (*reverse)(conf_object_t *obj); attr_value_t (*uncall)(conf_object_t *obj); attr_value_t (*previous)(conf_object_t *obj); attr_value_t (*previous_instruction)(conf_object_t *obj); attr_value_t (*unstep)(conf_object_t *obj); attr_value_t (*unstep_instruction)(conf_object_t *obj); attr_value_t (*stop)(conf_object_t *obj); attr_value_t (*function_return)(conf_object_t *obj); attr_value_t (*until)(conf_object_t *obj, const char *location); } run_control_interface_t;
typedef int ieee_802_3_link_status_t;
constant IEEE_link_unconnected = 0;
constant IEEE_link_down = 1;
constant IEEE_link_up = 2;
typedef int read_or_write_t;
constant Sim_RW_Read = 0;
constant Sim_RW_Write = 1;
typedef struct { int length; uint16 *data; } ms1553_words_t;
typedef struct { void (*interrupt)(conf_object_t *obj, sapic_delivery_mode_t delivery_mode, uint8 vector); } sapic_interface_t;
typedef struct { void (*write_at)(conf_object_t *obj, int value, int x, int y, int fg, int bg); void (*graphics_mode)(conf_object_t *obj, int in_graphics_mode); } extended_serial_interface_t;
typedef struct { int (*get_privilege_level)(conf_object_t *cpu); instr_info_t (*instruction_info)(conf_object_t *cpu, generic_address_t address, int type); void (*reset)(conf_object_t *cpu, int hard_reset); exception_type_t (*call_mem_hier)(conf_object_t *cpu, conf_object_t *mem_space, conf_object_t *mem_hier_obj, timing_model_interface_t *mem_hier_int, generic_transaction_t *mem_op, map_list_t *map_list); } processor_internal_interface_t;
typedef int x86_access_type_t;
constant X86_Other = 0;
constant X86_Vanilla = 1;
constant X86_Instruction = 2;
constant X86_Clflush = 3;
constant X86_Fpu_Env = 4;
constant X86_Fpu_State = 5;
constant X86_Idt = 6;
constant X86_Gdt = 7;
constant X86_Ldt = 8;
constant X86_Task_Segment = 9;
constant X86_Task_Switch = 10;
constant X86_Far_Call_Parameter = 11;
constant X86_Stack = 12;
constant X86_Pml4 = 13;
constant X86_Pdp = 14;
constant X86_Pd = 15;
constant X86_Pt = 16;
constant X86_Sse = 17;
constant X86_Fpu = 18;
constant X86_Access_Simple = 19;
constant X86_Microcode_Update = 20;
constant X86_Non_Temporal = 21;
constant X86_Prefetch_3DNow = 22;
constant X86_Prefetchw_3DNow = 23;
constant X86_Prefetch_T0 = 24;
constant X86_Prefetch_T1 = 25;
constant X86_Prefetch_T2 = 26;
constant X86_Prefetch_NTA = 27;
constant X86_Loadall = 28;
constant X86_Atomic_Info = 29;
constant X86_Cmpxchg16b = 30;
constant X86_Smm_State = 31;
constant X86_Vmcs = 32;
constant X86_Vmx_IO_Bitmap = 33;
constant X86_Vmx_Vapic = 34;
constant X86_Vmx_Msr = 35;
typedef void (*dma_enable_call_t)(conf_object_t *, conf_object_t *);
typedef struct { int (*register_device)(conf_object_t *obj, const char *type, uint8 id, conf_object_t *device); int (*unregister_device)(conf_object_t *obj, const char *type, uint8 id, conf_object_t *device); } cell_interrupt_bus_interface_t;
typedef int breakpoint_id_t;
typedef struct { cpuid_ret_t (*cpuid)(conf_object_t *obj, conf_object_t *cpu, uint32 in_eax, uint32 in_ebx, uint32 in_ecx, uint32 in_edx); } x86_cpuid_interface_t;
typedef struct { usb_transfer_completion_t (*submit_transfer)(conf_object_t *dev_obj, usb_transfer_t *transfer); void (*abort_transfer)(conf_object_t *dev_obj, usb_transfer_t *transfer); void (*reset)(conf_object_t *dev_obj); } usb_device_interface_t;
typedef struct { void (*set_pin_status)(conf_object_t *obj, x86_pin_t pin, int status); void (*start_up)(conf_object_t *obj, uint32 start_address); int (*interrupt)(conf_object_t *obj, int (*ack)(conf_object_t *), conf_object_t *data); void (*uninterrupt)(conf_object_t *obj, int (*ack)(conf_object_t *)); int (*has_pending_interrupt)(conf_object_t *obj); int (*has_waiting_interrupt)(conf_object_t *obj); physical_address_t (*linear_to_physical)(conf_object_t *obj, data_or_instr_t data_or_instr, linear_address_t address); void (*enter_acpi_c2_state)(conf_object_t *obj); } x86_interface_t;
typedef struct { int (*connect_device)(conf_object_t *bus, conf_object_t *dev); int (*disconnect_device)(conf_object_t *bus, conf_object_t *dev); void (*set_device_bus_id)(conf_object_t *bus, conf_object_t *dev, uint16 bus_id); void (*set_id_mask)(conf_object_t *bus, conf_object_t *dev, uint16 id_mask); firewire_ack_code_t (*transfer)(conf_object_t *bus, conf_object_t *source, dbuffer_t *packet, int crc_calculated); int (*register_channel)(conf_object_t *bus, conf_object_t *dev, uint32 channel); int (*unregister_channel)(conf_object_t *bus, conf_object_t *dev, uint32 channel); void (*reset)(conf_object_t *bus); } firewire_bus_interface_t;
typedef struct { generic_transaction_t s; uint3 cache_coherency; } mips_memory_transaction_t;
typedef struct {  } parse_object_t;
typedef struct { cycles_t (*get_stall_cycles)(conf_object_t *obj); void (*set_stall_cycles)(conf_object_t *obj, cycles_t cycles); cycles_t (*get_total_stall_cycles)(conf_object_t *obj); } stall_interface_t;
typedef struct { const uint8 *start; size_t len; } frags_frag_t;
typedef struct { void (*save)(conf_object_t *obj, const char *path); void (*finish)(conf_object_t *obj, int success); int (*has_persistent_data)(conf_object_t *obj); } checkpoint_interface_t;
typedef int (*dma_write_data_t)(conf_object_t *, int, uint8 *, int);
typedef int sim_exception_t;
constant SimExc_No_Exception = 0;
constant SimExc_General = 1;
constant SimExc_Arithmetic = 2;
constant SimExc_Lookup = 3;
constant SimExc_Attribute = 4;
constant SimExc_IOError = 5;
constant SimExc_Index = 6;
constant SimExc_Memory = 7;
constant SimExc_Inquiry = 8;
constant SimExc_InquiryOutsideMemory = 9;
constant SimExc_InquiryUnhandled = 10;
constant SimExc_Overflow = 11;
constant SimExc_Syntax = 12;
constant SimExc_Type = 13;
constant SimExc_ZeroDivision = 14;
constant SimExc_RuntimeError = 15;
constant SimExc_Break = 16;
constant SimExc_PythonTranslation = 17;
constant SimExc_License = 18;
constant SimExc_IllegalValue = 19;
constant SimExc_ObjectNotFound = 20;
constant SimExc_InterfaceNotFound = 21;
constant SimExc_AttrNotFound = 22;
constant SimExc_AttrNotReadable = 23;
constant SimExc_AttrNotWritable = 24;
constant SimExc_NeedInteger = 25;
constant SimExc_NeedFloating = 26;
constant SimExc_NeedBoolean = 27;
constant SimExc_NeedString = 28;
constant SimExc_NeedList = 29;
constant SimExc_NeedDict = 30;
constant SimExc_NeedData = 31;
constant SimExc_NeedObject = 32;
constant Sim_Exceptions = 33;
typedef struct { branch_arc_iter_t *(*iter)(conf_object_t *prof_obj, generic_address_t start, generic_address_t stop, branch_recorder_direction_t dir); } branch_arc_interface_t;
typedef struct { int (*get_client_id)(conf_object_t *obj); void (*unregister_link)(conf_object_t *obj, conf_object_t *link_obj); int64 (*get_offset)(conf_object_t *client); } central_client_interface_t;
typedef int ppc_sleep_state_t;
constant PPC_Sleep_Awake = 0;
constant PPC_Sleep_MSR = 1;
constant PPC_Sleep_Doze = 2;
constant PPC_Sleep_Nap = 3;
constant PPC_Sleep_Sleep = 4;
constant PPC_Sleep_Rvwinkle = 5;
constant PPC_Sleep_Wait = 6;
constant PPC_Sleep_Mdors = 7;
typedef int gen_spr_ret_t;
constant Sim_Gen_Spr_Ok = 0;
constant Sim_Gen_Spr_Illegal = 1;
constant Sim_Gen_Spr_Privilege = 2;
constant Sim_Gen_Spr_Processor_Sleeps = 3;
extern gen_spr_ret_t Sim_PPC_Spr_Ok;
extern gen_spr_ret_t Sim_PPC_Spr_Illegal;
extern gen_spr_ret_t Sim_PPC_Spr_Privilege;
typedef struct { void (*realtime_stall)(conf_object_t *obj, cycles_t stall); } realtime_cpu_interface_t;
typedef int endianness_t;
constant Sim_Endian_Target = 0;
constant Sim_Endian_Host_From_BE = 1;
constant Sim_Endian_Host_From_LE = 2;
typedef struct { uint32 steps; uint32 cycles; } step_cycle_ratio_t;
typedef struct { get_page_t (*get_page)(conf_object_t *obj, physical_address_t addr); } ram_interface_t;
typedef struct { operate_func_t operate; } snoop_memory_interface_t;
typedef int processor_mode_t;
constant Sim_CPU_Mode_User = 0;
constant Sim_CPU_Mode_Supervisor = 1;
constant Sim_CPU_Mode_Hypervisor = 2;
typedef int (*retrieve_packet_t)(conf_object_t *obj, int ch, dbuffer_t *buf, uint16 *ctrl);
typedef struct { conf_object_t *(*translate)(conf_object_t *obj, generic_transaction_t *mem_op, map_info_t mapinfo); } translate_interface_t;
typedef cycles_t (*operate_func_t)(conf_object_t *mem_hier, conf_object_t *space, map_list_t *map_list, generic_transaction_t *mem_op);
typedef struct { map_func_t map; operation_func_t operation; } io_memory_interface_t;
typedef int sapic_trigger_mode_t;
constant SAPIC_Edge = 0;
constant SAPIC_Level = 1;
typedef struct { attr_value_t key; attr_value_t value; } attr_dict_pair_t;
typedef int sapic_bus_status_t;
constant SAPIC_Bus_Accepted = 0;
constant SAPIC_Bus_Retry = 1;
constant SAPIC_Bus_No_Target = 2;
constant SAPIC_Bus_Invalid = 3;
typedef struct { void (*read)(conf_object_t *img, void *to_buf, vdisk_addr_t start, size_t length); void (*write)(conf_object_t *img, const void *from_buf, vdisk_addr_t start, size_t length); int (*for_all_spages)(conf_object_t *img, int (*f)(image_spage_t *, vdisk_addr_t, void *), void *arg); void (*set_persistent)(conf_object_t *obj); void (*save_to_file)(conf_object_t *obj, const char *file, uint64 start, uint64 length); void (*save_diff)(conf_object_t *obj, const char *file); void (*clear_range)(conf_object_t *obj, uint64 start, uint64 length); void (*dealloc_icode_page)(conf_object_t *obj, image_spage_t *spage); } image_interface_t;
typedef struct { void (*address_added)(conf_object_t *device, uint32 addr, uint32 mask); void (*address_removed)(conf_object_t *device, uint32 addr, uint32 mask); } i2c_bridge_interface_t;
typedef struct { void (*clear_atomic_reservation_bit)(conf_object_t *cpu); void (*raise_machine_check_exception)(conf_object_t *cpu, ppc_mc_exc_t exc); void (*register_spr_user_handlers)(integer_t spr_number, ppc_spr_user_getter_func_t getter, void *user_getter_data, ppc_spr_user_setter_func_t setter, void *user_setter_data, int privilege_checks); void (*unregister_spr_user_handlers)(integer_t spr_number); void (*spr_set_target_value)(conf_object_t *cpu, uinteger_t value); void (*spr_stash_value)(conf_object_t *cpu, integer_t spr_number, uinteger_t value); uinteger_t (*spr_fetch_value)(conf_object_t *cpu, integer_t spr_number); ppc_spr_ret_t (*spr_default_getter)(conf_object_t *cpu, integer_t spr_number, ppc_spr_access_type_t type); ppc_spr_ret_t (*spr_default_setter)(conf_object_t *cpu, integer_t spr_number, uinteger_t value, ppc_spr_access_type_t type); const char *(*spr_get_name)(integer_t spr_number); integer_t (*spr_get_number)(const char *spr_name); uint32 (*get_timebase_enabled)(conf_object_t *cpu); void (*set_timebase_enabled)(conf_object_t *cpu, uint32 enabled); ppc_sleep_state_t (*get_sleep_state)(conf_object_t *cpu); } ppc_interface_t;
typedef struct { step_cycle_ratio_t (*get_ratio)(conf_object_t *obj); void (*set_ratio)(conf_object_t *obj, uint32 steps, uint32 cycles); } step_cycle_ratio_interface_t;
typedef int hap_handle_t;
typedef struct { conf_object_t *cpu; pc_step_t steps; int reactivation_id; bp_time_stamp_t *next; } bp_time_stamp_t;
typedef void (*sparc_u3_error_t)(conf_object_t *obj, int afsr_status_bit, exception_type_t trap, int estate_error_enable_bit, int m_synd_priority, uint32 m_synd, int e_synd_priority, uint32 e_synd, int afar_priority, uint64 afar, int set_priv, int set_me);
typedef struct { attr_value_t (*settings_id_list)(void); const char *(*describe_settings)(const char *settings_id); int (*use_settings)(conf_object_t *tracker, const char *settings_id); } tracker_settings_interface_t;
typedef breakpoint_range_t *(*get_bp_ranges_func_t)(conf_object_t *object, breakpoint_t *bp);
typedef struct { generic_transaction_t s; processor_mode_t mode; ppc_mem_instr_origin_t instr_origin; logical_address_t ea_origin; uint8 wimg; uint8 alignment; uint8 inhibit_exception; uint8 external_pid; ppc_decoration_t decoration; } ppc_memory_transaction_t;
typedef gen_spr_user_getter_func_t ppc_spr_user_getter_func_t;
typedef int (*map_func_t)(conf_object_t *obj, addr_space_t memory_or_io, map_info_t map_info);
typedef set_error_t (*set_class_attr_t)(void *ptr, conf_class_t *c, attr_value_t *val, attr_value_t *idx);
typedef struct { void (*init)(conf_object_t *obj, uint8 *buff, int buff_len, uinteger_t address); disasm_instr_t (*next)(conf_object_t *obj); } disassemble_interface_t;
typedef int ppc_decoration_type_t;
constant Decoration_None = 0;
constant Decoration_Notify = 1;
constant Decoration_Load = 2;
constant Decoration_Store = 3;
typedef int serial_peripheral_interface_flags_t;
constant SPI_Flags_CPHA = 1;
constant SPI_Flags_CPOL = 2;
typedef struct { set_bus_id_t set_bus_id; interrupt_by_id_t interrupt_by_id; get_object_by_id_t get_object_by_id; reset_all_t reset_all; } sparc_irq_bus_interface_t;
typedef int event_class_flag_t;
constant Sim_EC_No_Flags = 0;
constant Sim_EC_Notsaved = 1;
constant Sim_EC_Slot_Early = 2;
constant Sim_EC_Slot_Late = 4;
constant Sim_EC_Machine_Sync = 8;
typedef void interface_t;
typedef struct { void (*send_message)(conf_object_t *obj, uint32 thread_id, uint8 dst_id, uint8 dst_sw_code, uint8 size); void (*load_message)(conf_object_t *obj, uint32 thread_id, uint8 bucket); int (*wait)(conf_object_t *obj, uint32 thread_id, uint8 vector); } fmn_station_control_interface_t;
typedef struct { uinteger_t (*read_window_register)(conf_object_t *cpu, int window, int reg); void (*write_window_register)(conf_object_t *cpu, int window, int reg, uinteger_t value); void (*power_down)(conf_object_t *cpu); } sparc_v8_interface_t;
typedef int (*interrupt_query_enabled_t)(conf_object_t *interrupt_controller, int irq_level);
typedef struct { void (*add_link)(conf_object_t *obj, conf_object_t *child, const char *linkname); void (*remove_link)(conf_object_t *obj, conf_object_t *child, const char *linkname); void (*set_link_min_latency)(conf_object_t *obj, const char *linkname, global_time_diff_t new_min_latency); void (*decide_link_min_latency)(conf_object_t *obj, const char *linkname); } link_route_interface_t;
typedef int ms1553_dir_t;
constant MS1553_Dir_Transmit = 0;
constant MS1553_Dir_Receive = 1;
typedef struct { void (*spi_response)(conf_object_t *obj, int bits, dbuffer_t *payload); } serial_peripheral_interface_master_interface_t;
typedef int i2c_device_state_t;
constant I2C_idle = 0;
constant I2C_master_transmit = 1;
constant I2C_master_receive = 2;
constant I2C_slave_transmit = 3;
constant I2C_slave_receive = 4;
constant I2C_max_states = 5;
typedef struct { int log_level; } log_object_t;
typedef struct { void (*receive_data)(conf_object_t *obj, conf_object_t *link, int id, ms1553_phase_t phase, ms1553_words_t data); void (*receive_error)(conf_object_t *obj, conf_object_t *link, int id, ms1553_error_t err); } ms1553_terminal_interface_t;
typedef struct { void (*flush)(conf_object_t *obj); } simulator_cache_interface_t;
typedef void (*dma_clr_interrupt_t)(conf_object_t *);
typedef gen_spr_ret_t (*gen_spr_user_getter_func_t)(conf_object_t *cpu, integer_t spr_number, gen_spr_access_type_t type, void *user_data);
typedef int trackee_unix_type_t;
constant Sim_Trackee_Invalid = 0;
constant Sim_Trackee_Kernel = 1;
constant Sim_Trackee_Process = 2;
typedef struct { attr_kind_t kind; struct { const char *string; integer_t integer; int boolean; double floating; struct { size_t size; attr_value_t *vector; } list; struct { size_t size; attr_dict_pair_t *vector; } dict; struct { size_t size; uint8 *data; } data; conf_object_t *object; struct { size_t size; char *filename; uint64 offset; } udata; char *uobject; } u; } attr_value_t;
typedef struct { sparc_u3_error_t cause_error; } sparc_u3_interface_t;
typedef int notify_mode_t;
constant Sim_NM_Read = 0;
constant Sim_NM_Write = 1;
typedef uint64 vdisk_addr_t;
typedef struct { int (*connect_device)(conf_object_t *_obj, conf_object_t *dev, int *new_connection); void (*disconnect_device)(conf_object_t *_obj, conf_object_t *dev); void (*send_frame)(conf_object_t *_obj, int id, dbuffer_t *frame, int crc_calculated, nano_secs_t delay); void (*auto_negotiate)(conf_object_t *_obj, int id, phy_speed_t speed); void (*add_mac)(conf_object_t *_obj, int id, byte_string_t addr); void (*add_mac_mask)(conf_object_t *_obj, int id, byte_string_t addr, byte_string_t mask); void (*delete_mac)(conf_object_t *_obj, int id, byte_string_t addr); void (*delete_mac_mask)(conf_object_t *_obj, int id, byte_string_t addr, byte_string_t mask); void (*clear_macs)(conf_object_t *_obj, int id); void (*promiscuous_mode)(conf_object_t *_obj, int id, int enable); } ethernet_link_interface_t;
typedef struct {  } FILE;
typedef int addr_space_t;
constant Sim_Addr_Space_Conf = 0;
constant Sim_Addr_Space_IO = 1;
constant Sim_Addr_Space_Memory = 2;
typedef uint32 size_t;
typedef struct { utopia_ii_send_func send; } utopia_ii_egress_interface_t;
typedef struct { attr_value_t (*symbol_file)(conf_object_t *obj, const char *filename); attr_value_t (*add_directory)(conf_object_t *obj, const char *path); attr_value_t (*get_directories)(conf_object_t *obj); attr_value_t (*clear_directories)(conf_object_t *obj); attr_value_t (*stack_depth)(conf_object_t *obj); attr_value_t (*stack_frames)(conf_object_t *obj, uint32 min, uint32 max); attr_value_t (*stack_arguments)(conf_object_t *obj, uint32 frame); attr_value_t (*stack_locals)(conf_object_t *obj, uint32 frame); attr_value_t (*get_stack_frame)(conf_object_t *obj); attr_value_t (*set_stack_frame)(conf_object_t *obj, uint32 frame); attr_value_t (*symbol_value_string)(conf_object_t *obj, const char *symbol); attr_value_t (*symbol_value)(conf_object_t *obj, const char *symbol); attr_value_t (*symbol_string)(conf_object_t *obj, const char *symbol); attr_value_t (*symbol_type)(conf_object_t *obj, const char *symbol); attr_value_t (*symbol_address)(conf_object_t *obj, const char *symbol); attr_value_t (*address_string)(conf_object_t *obj, uint64 address); attr_value_t (*address_source)(conf_object_t *obj, uint64 address); attr_value_t (*address_symbol)(conf_object_t *obj, uint64 address); attr_value_t (*source_address)(conf_object_t *obj, const char *file, uint32 line); attr_value_t (*source_path)(conf_object_t *obj, const char *file); } symdebug_interface_t;
typedef simtime_t pc_step_t;
typedef struct { int number_of_regs; reg_info_t regs[40]; } instr_info_dep_t;
typedef integer_t nano_secs_t;
typedef void (*reset_all_t)(conf_object_t *obj, int reset_type);
typedef struct { int (*create_group)(conf_object_t *obj, conf_object_t *image_obj); void (*protect)(conf_object_t *obj, int id); } pool_protect_interface_t;
typedef int usb_direction_t;
constant USB_Direction_None = 0;
constant USB_Direction_In = 1;
constant USB_Direction_Out = 2;
typedef struct { generic_transaction_t s; int privilege_level; int speculative; int advanced; int non_access; uint16 isr_code; int rse; int rse_ir; int deferred_fault; } ia64_memory_transaction_t;
typedef struct { uinteger_t (*read_register_mode)(conf_object_t *processor_obj, int reg_num, int mode); void (*write_register_mode)(conf_object_t *processor_obj, int reg_num, int mode, uinteger_t value); } arm_interface_t;
typedef int instruction_fetch_mode_t;
constant Instruction_Fetch_None = 0;
constant Instruction_Fetch_Cache_Access_Trace = 1;
constant Instruction_Fetch_Trace = 2;
typedef int cpu_endian_t;
constant Sim_Endian_Little = 0;
constant Sim_Endian_Big = 1;
typedef struct { void (*change_pending)(conf_object_t *cpu_obj, int level, uint32 intevt, int mod_imask_flag); } sh_interrupt_interface_t;
typedef struct { conf_object_t *(*get_current_context)(conf_object_t *obj); int (*set_current_context)(conf_object_t *obj, conf_object_t *ctx); } context_handler_interface_t;
typedef struct { void (*set_status)(conf_object_t *link, uint64 cookie, int link_up); } ethernet_cable_link_interface_t;
typedef struct { h8_sleep_mode_t (*mode_transition)(conf_object_t *obj, h8_sleep_mode_t current_mode, h8_transition_direction_t direction); } h8_power_interface_t;
typedef int ms1553_phase_t;
constant MS1553_Phase_Idle = 0;
constant MS1553_Phase_T_Command = 1;
constant MS1553_Phase_R_Command = 2;
constant MS1553_Phase_M_T_Command = 3;
constant MS1553_Phase_M_R_Command = 4;
constant MS1553_Phase_M_N_Command = 5;
constant MS1553_Phase_Data = 6;
constant MS1553_Phase_Status = 7;
constant MS1553_Num_Phases = 8;
typedef int exception_type_t;
typedef struct { void (*start_request)(conf_object_t *device, uint32 address); void (*read_request)(conf_object_t *device); void (*ack_read_request)(conf_object_t *device, i2c_status_t ack); void (*write_request)(conf_object_t *device, uint8 value); void (*stop)(conf_object_t *device, uint8 repeated_start); } i2c_slave_interface_t;
typedef struct { utopia_ii_send_func send; } utopia_ii_ingress_interface_t;
typedef struct { int (*send_message)(conf_object_t *dst, conf_object_t *src, pcie_message_type_t type, byte_string_t payload); } pci_express_interface_t;
typedef struct { attr_value_t (*get_event_info_val)(conf_object_t *obj, void (*func)(conf_object_t *obj, void *param), void *user_data); const char *(*describe_event)(conf_object_t *obj, void (*func)(conf_object_t *obj, void *param), void *user_data); void (*get_event_info)(attr_value_t *checkpoint_value, conf_object_t *obj, void (*func)(conf_object_t *obj, void *param), void *user_data); int (*set_event_info)(conf_object_t *obj, attr_value_t *checkpoint_value, void (**out_func)(conf_object_t *obj, void *param), void **out_info); } vt_event_poster_interface_t;
typedef struct { void (*set_link_id)(conf_object_t *link_obj, int link_id, int cell_id, int master_cell_id); void (*set_min_latency)(conf_object_t *link_obj, uint64 min_latency); void (*receive_message)(conf_object_t *link_obj, dbuffer_t *msg); void (*peer_added)(conf_object_t *link_obj, int peer_id); void (*peer_removed)(conf_object_t *link_obj, int peer_id); } central_link_interface_t;
typedef struct { void (*register_slave_address)(conf_object_t *i2c_link, conf_object_t *slave, uint32 address, uint32 mask); void (*unregister_slave_address)(conf_object_t *i2c_link, conf_object_t *slave, uint32 address, uint32 mask); void (*register_bridge)(conf_object_t *i2c_link, conf_object_t *bridge); void (*disconnect_device)(conf_object_t *i2c_link, conf_object_t *device); void (*start_request)(conf_object_t *i2c_link, conf_object_t *master, uint32 address); void (*read_request)(conf_object_t *i2c_link, conf_object_t *master); void (*ack_read_request)(conf_object_t *i2c_link, conf_object_t *master, i2c_status_t ack); void (*write_request)(conf_object_t *i2c_link, conf_object_t *master, uint8 value); void (*read_response)(conf_object_t *i2c_link, conf_object_t *slave, uint8 value); void (*ack_read_response)(conf_object_t *i2c_link, conf_object_t *slave); void (*write_response)(conf_object_t *i2c_link, conf_object_t *slave, i2c_status_t status); void (*start_response)(conf_object_t *i2c_link, conf_object_t *slave, i2c_status_t status); void (*stop)(conf_object_t *i2c_link, conf_object_t *master); } i2c_link_interface_t;
typedef struct { int first; int last; cpuset_t *next; } cpuset_t;
typedef struct { void (*process_data)(conf_object_t *obj, uint32 CRd, uint32 opcode_1, uint32 CRn, uint32 CRm, uint32 opcode_2, int type); void (*load_coprocessor)(conf_object_t *obj, uint32 CRd, uint32 N, uint32 Options, uint32 value, int type); uint32 (*read_register)(conf_object_t *obj, uint32 opcode_1, uint32 CRn, uint32 CRm, uint32 opcode_2, int type); void (*write_register)(conf_object_t *obj, uint32 value, uint32 opcode_1, uint32 CRn, uint32 CRm, uint32 opcode_2, int type); uint32 (*store_coprocessor)(conf_object_t *obj, uint32 CRd, uint32 N, uint32 Options, int type); void (*reset)(conf_object_t *obj, int hard_reset); } arm_coprocessor_interface_t;
typedef int h8_transition_direction_t;
constant H8_Transition_From_Active = 0;
constant H8_Transition_From_Sleep = 1;
typedef struct { int64 t; } global_time_diff_t;
typedef struct {  } page_share_t;
typedef int usb_speed_t;
constant USB_Speed_Low = 0;
constant USB_Speed_Full = 1;
constant USB_Speed_High = 2;
typedef struct { int (*register_link)(conf_object_t *obj, conf_object_t *link_obj, const char *linkname, const char *linktype); void (*send_message)(conf_object_t *obj, int link_object_handle, int nrcpt, int *rcpts, dbuffer_t *msg); } link_dispatch_interface_t;
typedef uint64 generic_address_t;
typedef struct { int (*connect_device)(conf_object_t *_obj, conf_object_t *dev, int *new_connection, uint32 address); void (*disconnect_device)(conf_object_t *_obj, conf_object_t *dev); void (*send_frame)(conf_object_t *_obj, int id, uint32 address, dbuffer_t *frame, nano_secs_t delay); } generic_message_link_interface_t;
typedef struct { uint8 *(*get_base)(conf_object_t *obj, size_t *retsize); void (*set_base)(conf_object_t *obj, uint8 *base); void (*prepare_range)(conf_object_t *obj, access_t type, size_t offs, size_t size); } linear_image_interface_t;
typedef struct { size_t len; uint32 *data; } uint32_array_t;
typedef int (*dma_read_data_t)(conf_object_t *, int, uint8 *, int);
typedef struct { void (*reset)(conf_object_t *, int hard); } reset_interface_t;
typedef void (*recorder_input_handler_t)(conf_object_t *obj, dbuffer_t *data, uint32 uint_data);
typedef struct {  } recorder_t;
typedef int rapidio_operation_t;
constant RapidIO_Read = 0;
constant RapidIO_Write = 1;
constant RapidIO_Increment = 2;
constant RapidIO_Decrement = 3;
constant RapidIO_Test_and_Swap = 4;
constant RapidIO_Set = 5;
constant RapidIO_Clear = 6;
constant RapidIO_Compare_and_Swap = 7;
typedef struct {  } icode_block_t;
typedef struct { operate_func_t operate; } timing_model_interface_t;
typedef struct { void (*new_message)(conf_object_t *obj, conf_object_t *bridge, uint16 cmd, ms1553_words_t data, uint16 sts); } ms1553_bridge_terminal_interface_t;
typedef void (*remove_bp_func_t)(conf_object_t *object, breakpoint_t *bp);
typedef struct { void (*mouse_event)(conf_object_t *obj, int xmicro, int ymicro, int z, int buttons); } mouse_interface_t;
typedef struct { void (*spi_request)(conf_object_t *obj, int first, int last, int bits, dbuffer_t *payload); void (*connect_master)(conf_object_t *obj, conf_object_t *master, const char *port, serial_peripheral_interface_flags_t flags); void (*disconnect_master)(conf_object_t *obj, conf_object_t *master); } serial_peripheral_interface_slave_interface_t;
typedef int local_apic_interrupt_t;
constant Apic_Performance_Counter = 832;
constant Apic_Thermal_Sensor = 816;
typedef int map_type_t;
constant Sim_Map_Ram = 0;
constant Sim_Map_Rom = 1;
constant Sim_Map_IO = 2;
constant Sim_Map_Port = 3;
constant Sim_Map_Translate = 256;
constant Sim_Map_Translate_To_Space = 257;
constant Sim_Map_Translate_To_Ram = 258;
constant Sim_Map_Translate_To_Rom = 259;
typedef struct { void (*raise_interrupt)(conf_object_t *obj, interrupt_ack_fn_t, conf_object_t *); void (*lower_interrupt)(conf_object_t *obj, interrupt_ack_fn_t); } interrupt_ack_interface_t;
typedef int (*set_bus_id_t)(conf_object_t *obj, conf_object_t *src, int id);
typedef struct { int (*keyboard_event)(conf_object_t *obj, int key_up, uint8 key); } kbd_interface_t;
typedef struct { int size; breakpoint_t **vector; } breakpoint_vector_t;
typedef struct { void (*cache_miss)(conf_object_t *obj, data_or_instr_t data_or_instr, read_or_write_t read_or_write, logical_address_t logical_address, physical_address_t physical_address); } cache_miss_interface_t;
typedef struct { uint8 bmRequestType; uint8 bRequest; uint16 wValue; uint16 wIndex; uint16 wLength; } usb_device_request_t;
typedef struct { int (*read_toc)(conf_object_t *media, uint8 *buf, int msf, int start_track); uint32 (*capacity)(conf_object_t *media); int (*read_block)(conf_object_t *media, uint8 *buf, int lba); int (*read_raw_block)(conf_object_t *media, uint8 *buf, int lba); int (*insert)(conf_object_t *media); void (*eject)(conf_object_t *media); } cdrom_media_interface_t;
typedef struct { uint16 (*read_access)(conf_object_t *obj); void (*write_access)(conf_object_t *obj, uint16 value); void (*set_command_latch_enable)(conf_object_t *obj, int value); void (*set_address_latch_enable)(conf_object_t *obj, int value); void (*set_write_protect)(conf_object_t *obj, int value); void (*set_spare_area_enable)(conf_object_t *obj, int value); } nand_flash_interface_t;
typedef struct { void (*receive_frame)(conf_object_t *dev, conf_object_t *link, dbuffer_t *frame, int crc_calculated); phy_speed_t (*auto_neg_request)(conf_object_t *dev, phy_speed_t speed); void (*auto_neg_reply)(conf_object_t *dev, phy_speed_t speed); } ethernet_device_interface_t;
typedef int ms1553_mode_code_t;
constant MS1553_Dynamic_Bus_Control = 0;
constant MS1553_Synchronize_T = 1;
constant MS1553_Transmit_Status_word = 2;
constant MS1553_Initiate_Self_Test = 3;
constant MS1553_Transmitter_Shutdown = 4;
constant MS1553_Override_Transmitter_Shutdown = 5;
constant MS1553_Inhibit_Terminal_Flag_Bit = 6;
constant MS1553_Override_Inhibit_Terminal_Flag_Bit = 7;
constant MS1553_Reset_Remote_Terminal = 8;
constant MS1553_Transmit_Vector_Word = 16;
constant MS1553_Synchronize_R = 17;
constant MS1553_Transmit_Last_Command_Word = 18;
constant MS1553_Transmit_BIT_Vector = 19;
constant MS1553_Selected_Transmitter_Shutdown = 20;
constant MS1553_Override_Selected_Transmitter_Shutdown = 21;
typedef struct { int size; int used; conf_object_t **elements; } cpu_list_t;
typedef struct { int (*receive_frame)(conf_object_t *obj, int phy, dbuffer_t *buf, int crc_ok); void (*tx_bandwidth_available)(conf_object_t *obj, int phy); void (*link_status_changed)(conf_object_t *obj, int phy, ieee_802_3_link_status_t status); } ieee_802_3_mac_interface_t;
typedef struct { int (*connect_terminal)(conf_object_t *link, conf_object_t *obj); void (*disconnect_terminal)(conf_object_t *link, int id); void (*send_data)(conf_object_t *link, int id, ms1553_phase_t phase, ms1553_words_t data); void (*set_terminal_address)(conf_object_t *link, int id, int address); void (*clr_terminal_address)(conf_object_t *link, int id); void (*set_idle)(conf_object_t *link, int id); void (*inject_data)(conf_object_t *link, ms1553_phase_t phase, ms1553_words_t data); void (*inject_error)(conf_object_t *link, ms1553_error_t err); } ms1553_link_interface_t;
typedef struct { stall_id_num_t explicit_num; stall_id_num_t implicit_num; } stall_id_t;
typedef struct { ppc_decoration_type_t type; uint64 data; } ppc_decoration_t;
typedef int ms1553_error_t;
constant MS1553_Err_Manchester = 0;
constant MS1553_Err_Sync_Field = 1;
constant MS1553_Err_Word_Count = 2;
constant MS1553_Err_Parity = 3;
constant MS1553_Err_Protocol = 4;
typedef void (*interrupt_query_register_t)(conf_object_t *interrupt_controller, conf_object_t *device, int irq_level, interrupt_changed_state_callback_t cb, void *cb_data);
typedef void (*device_interrupt_t)(conf_object_t *, int);
typedef struct { int (*write)(conf_object_t *obj, int value); void (*receive_ready)(conf_object_t *obj); } serial_device_interface_t;
typedef struct { ia64_fp_register_t (*read_fp_register)(conf_object_t *cpu, int reg); void (*write_fp_register)(conf_object_t *cpu, int reg, ia64_fp_register_t val); } ia64_interface_t;
typedef int stop_bits_t;
constant Stop_Bits_1 = 0;
constant Stop_Bits_1p5 = 1;
constant Stop_Bits_2 = 2;
typedef struct { int (*send_frame)(conf_object_t *obj, dbuffer_t *buf, int replace_crc); int (*check_tx_bandwidth)(conf_object_t *obj); void (*add_mac)(conf_object_t *obj, byte_string_t mac); void (*del_mac)(conf_object_t *obj, byte_string_t mac); void (*add_mac_mask)(conf_object_t *obj, byte_string_t mac, byte_string_t mask); void (*del_mac_mask)(conf_object_t *obj, byte_string_t mac, byte_string_t mask); void (*set_promiscous_mode)(conf_object_t *obj, int enable); } ieee_802_3_phy_v2_interface_t;
typedef void (*trigger_t)(conf_object_t *, int param);
typedef int ppc_mem_instr_origin_t;
constant Normal_Load_Store = 0;
constant Caching_Inhibited = 1;
constant Instr_Multiple = 2;
constant Instr_String = 3;
constant Instr_Altivec_Element = 4;
constant Instr_dcbt = 5;
constant Instr_dcbst = 6;
constant Instr_dcbtst = 7;
constant Instr_dcbi = 8;
constant Instr_dcbf = 9;
constant Instr_dcbfl = 10;
constant Instr_dcba = 11;
constant Instr_dcbz = 12;
constant Instr_icbi = 13;
constant Instr_dst = 14;
constant Instr_dstt = 15;
constant Instr_dstst = 16;
constant Instr_dststt = 17;
constant Instr_dcblc_l1 = 18;
constant Instr_dcblc_l2 = 19;
constant Instr_dcbtls_l1 = 20;
constant Instr_dcbtls_l2 = 21;
constant Instr_dcbtstls_l1 = 22;
constant Instr_dcbtstls_l2 = 23;
constant Instr_icblc_l1 = 24;
constant Instr_icblc_l2 = 25;
constant Instr_icbtls_l1 = 26;
constant Instr_icbtls_l2 = 27;
constant Instr_lwarx = 28;
constant Instr_stwcx = 29;
constant Instr_ldarx = 30;
constant Instr_stdcx = 31;
constant Instr_lq = 32;
constant Instr_stq = 33;
constant Instr_sync = 34;
constant Instr_eieio = 35;
constant Instr_ecowx = 36;
constant Instr_eciwx = 37;
constant Instr_tlbie = 38;
constant Instr_tlbsync = 39;
constant Instr_isync = 40;
constant Instr_lfdp = 41;
constant Instr_stfdp = 42;
constant Instr_spe = 43;
constant Instr_dcbal = 44;
typedef struct { void (*peer_status)(conf_object_t *obj, int link_up); } ethernet_cable_device_interface_t;
typedef int hap_flags_t;
constant Sim_Hap_Simulation = 1;
constant Sim_Hap_Attr = 2;
typedef struct { void (*signal_level_change)(conf_object_t *obj, uint64 level); void (*signal_current_level)(conf_object_t *obj, uint64 level); } multi_level_signal_interface_t;
typedef struct { firewire_ack_code_t (*transfer)(conf_object_t *dev, dbuffer_t *packet, int crc_calculated); void (*reset)(conf_object_t *dev, uint16 id, uint8 root_id, uint32_array_t self_ids); uint32 (*get_self_id_template)(conf_object_t *dev); int (*get_rhb)(conf_object_t *dev); uint8 (*get_port_count)(conf_object_t *dev); uint16 (*get_port_mask)(conf_object_t *dev); } firewire_device_interface_t;
typedef int set_error_t;
constant Sim_Set_Ok = 0;
constant Sim_Set_Need_Integer = 1;
constant Sim_Set_Need_Floating = 2;
constant Sim_Set_Need_String = 3;
constant Sim_Set_Need_List = 4;
constant Sim_Set_Need_Dict = 5;
constant Sim_Set_Need_Boolean = 6;
constant Sim_Set_Need_Data = 7;
constant Sim_Set_Need_Object = 8;
constant Sim_Set_Object_Not_Found = 9;
constant Sim_Set_Interface_Not_Found = 10;
constant Sim_Set_Illegal_Value = 11;
constant Sim_Set_Illegal_Type = 12;
constant Sim_Set_Illegal_Index = 13;
constant Sim_Set_Attribute_Not_Found = 14;
constant Sim_Set_Not_Writable = 15;
constant Sim_Set_Ignored = 16;
constant Sim_Set_Error_Types = 17;
typedef struct { exception_type_t (*not_taken)(conf_object_t *obj, conf_object_t *src_space, conf_object_t *dst_space, exception_type_t ex, generic_transaction_t *mem_op, map_info_t mapinfo); } bridge_interface_t;
typedef conf_object_t *(*get_object_by_id_t)(conf_object_t *obj, int id);
typedef struct { int taken; uinteger_t out_a; uinteger_t out_b; uinteger_t out_c; uinteger_t out_d; } cpuid_ret_t;
typedef struct { uint64 (*next_gen_count)(conf_object_t *obj); physical_address_t (*real_to_phys)(conf_object_t *obj, conf_object_t *img, image_spage_t *spage); } broadcast_interface_t;
typedef struct { attr_value_t (*eval_sym)(conf_object_t *cpu, const char *expr, attr_value_t *frame, const char *format); attr_value_t (*stack_trace)(conf_object_t *cpu, int maxframes); attr_value_t (*fun_args)(conf_object_t *cpu, attr_value_t *frame); attr_value_t (*source_profile)(conf_object_t *symtable, conf_object_t *profile, int view); } symtable_interface_t;
typedef int sync_t;
constant Sim_Sync_Processor = 0;
constant Sim_Sync_Machine = 2;
typedef struct { int (*serial_access)(conf_object_t *obj, int data_in, int clock); uint16 (*read_register)(conf_object_t *obj, int phy, int reg); void (*write_register)(conf_object_t *obj, int phy, int reg, uint16 value); } mii_management_interface_t;
typedef struct { int integer; char *string; } tuple_int_string_t;
typedef set_error_t (*set_attr_t)(void *ptr, conf_object_t *obj, attr_value_t *val, attr_value_t *idx);
typedef struct { void (*bus_reset)(conf_object_t *obj); int (*interrupt_acknowledge)(conf_object_t *obj); void (*special_cycle)(conf_object_t *obj, uint32 value); void (*system_error)(conf_object_t *obj); void (*interrupt_raised)(conf_object_t *obj, int pin); void (*interrupt_lowered)(conf_object_t *obj, int pin); } pci_device_interface_t;
typedef struct {  } dbuffer_t;
typedef uint16 stall_id_num_t;
typedef struct { uint32 (*enabled)(conf_object_t *obj); uint64 (*acknowledge)(conf_object_t *obj, conf_object_t *core); } coreint_interface_t;
typedef struct { uint8 *data; icode_page_t *icode_pages; image_spage_t *spage; cpuset_t cpuset; } page_t;
typedef int (*store_packet_t)(conf_object_t *obj, int ch, dbuffer_t *buf, uint16 ctrl);
typedef struct { void (*interrupt)(conf_object_t *obj, int pin); void (*interrupt_clear)(conf_object_t *obj, int pin); } iosapic_interface_t;
typedef struct { size_t len; const uint8 *data; } bytes_t;
typedef int palcode_memop_flags_t;
constant Pal_memop_normal = 0;
constant Pal_memop_physical = 1;
constant Pal_memop_altmode = 2;
constant Pal_memop_wrtck = 4;
constant Pal_memop_quadword = 8;
constant Pal_memop_vpte = 16;
constant Pal_memop_lock = 32;
constant Pal_memop_cond = 64;
typedef exception_type_t (*operation_func_t)(conf_object_t *obj, generic_transaction_t *mem_op, map_info_t map_info);
typedef gen_spr_ret_t ppc_spr_ret_t;
typedef int ini_type_t;
constant Sim_Initiator_Illegal = 0;
constant Sim_Initiator_CPU = 4096;
constant Sim_Initiator_CPU_V9 = 4352;
constant Sim_Initiator_CPU_UII = 4353;
constant Sim_Initiator_CPU_UIII = 4354;
constant Sim_Initiator_CPU_UIV = 4355;
constant Sim_Initiator_CPU_UT1 = 4356;
constant Sim_Initiator_CPU_X86 = 4608;
constant Sim_Initiator_CPU_PPC = 4864;
constant Sim_Initiator_CPU_Alpha = 5120;
constant Sim_Initiator_CPU_IA64 = 5376;
constant Sim_Initiator_CPU_MIPS = 5632;
constant Sim_Initiator_CPU_MIPS_RM7000 = 5633;
constant Sim_Initiator_CPU_MIPS_E9000 = 5634;
constant Sim_Initiator_CPU_ARM = 5888;
constant Sim_Initiator_Device = 8192;
constant Sim_Initiator_PCI_Device = 8208;
constant Sim_Initiator_Cache = 12288;
constant Sim_Initiator_Other = 16384;
typedef int data_or_instr_t;
constant Sim_DI_Instruction = 0;
constant Sim_DI_Data = 1;
typedef integer_t simtime_t;
typedef int usb_transfer_completion_t;
constant USB_Transfer_Completed = 0;
constant USB_Transfer_Not_Ready = 1;
typedef struct { void (*enable)(conf_object_t *obj); void (*disable)(conf_object_t *obj); } abs_pointer_activate_interface_t;
typedef struct { page_t *page; physical_address_t page_base; physical_address_t page_size; page_t *extra_page; uint32 extra_page_offset; } get_page_t;
typedef struct { uint32 (*read_hpic)(conf_object_t *obj); void (*write_hpic)(conf_object_t *obj, uint32 value); uint32 (*read_hpia)(conf_object_t *obj); void (*write_hpia)(conf_object_t *obj, uint32 value); uint32 (*read_hpid)(conf_object_t *obj, int autoincrement); void (*write_hpid)(conf_object_t *obj, uint32 value, int autoincrement); } hpi_interface_t;
typedef int h8_sleep_mode_t;
constant H8_Sleep_Awake = 0;
constant H8_Sleep_Sleep = 1;
constant H8_Sleep_Soft_Standby = 2;
constant H8_Sleep_Hard_Standby = 3;
constant H8_Sleep_Watch = 4;
constant H8_Sleep_Subsleep = 5;
constant H8_Sleep_Subactive = 6;
typedef struct { trigger_t trigger; } trigger_interface_t;
typedef int attr_kind_t;
constant Sim_Val_Invalid = 0;
constant Sim_Val_String = 1;
constant Sim_Val_Integer = 2;
constant Sim_Val_Floating = 3;
constant Sim_Val_List = 4;
constant Sim_Val_Data = 5;
constant Sim_Val_Nil = 6;
constant Sim_Val_Object = 7;
constant Sim_Val_Dict = 8;
constant Sim_Val_Boolean = 9;
constant Sim_Val_Unresolved_Data = 10;
constant Sim_Val_Unresolved_Object = 11;
typedef struct { pc_step_t (*get_step_count)(conf_object_t *queue); void (*post_step)(conf_object_t *queue, event_class_t *evclass, conf_object_t *obj, pc_step_t steps, void *user_data); void (*cancel_step)(conf_object_t *queue, event_class_t *evclass, conf_object_t *obj, int (*pred)(void *data, void *match_data), void *match_data); pc_step_t (*find_next_step)(conf_object_t *queue, event_class_t *evclass, conf_object_t *obj, int (*pred)(void *data, void *match_data), void *match_data); attr_value_t (*events)(conf_object_t *obj); pc_step_t (*advance)(conf_object_t *queue, pc_step_t steps); } step_interface_t;
typedef uint64 physical_address_t;
typedef int ireg_info_t;
constant Sim_RegInfo_Catchable = 0;
typedef struct { void (*set_state)(conf_object_t *obj, abs_pointer_state_t state); } abs_pointer_interface_t;
typedef struct { apic_bus_status_t (*interrupt)(conf_object_t *obj, apic_destination_mode_t dest_mode, apic_delivery_mode_t delivery_mode, int level_assert, apic_trigger_mode_t trigger_mode, uint8 vector, uint8 destination); } apic_bus_interface_t;
typedef uint64 uinteger_t;
typedef struct { int (*connect_device)(conf_object_t *bus_obj, conf_object_t *dev_obj, usb_speed_t speed); int (*disconnect_device)(conf_object_t *bus_obj, conf_object_t *dev_obj); void (*complete_transfer)(conf_object_t *bus_obj, conf_object_t *dev_obj, usb_transfer_t *transfer); } usb_interface_t;
typedef struct { generic_transaction_t s; } sample_memory_transaction_t;
typedef int (*interrupt_ack_fn_t)(conf_object_t *);
typedef int parity_mode_t;
constant Parity_None = 0;
constant Parity_Even = 1;
constant Parity_Odd = 2;
typedef struct { size_t len; uint32 nfrags; frags_frag_t frags[8]; } frags_t;
typedef struct { int dummy; } log_object_interface_t;
typedef struct { mod_def_t (*read_mod_def)(conf_object_t *obj); void (*write_mod_def)(conf_object_t *obj, mod_def_t mod_def); void (*loopback)(conf_object_t *obj, int loopback); } gbic_transceiver_interface_t;
typedef struct { void (*release_all_pages)(conf_object_t *obj); void (*write_protect_all_pages)(conf_object_t *obj); void (*protect_host_page)(conf_object_t *obj, uint8 *host_addr, size_t size, access_t protect); } memory_page_update_interface_t;
typedef attr_value_t (*get_class_attr_t)(void *ptr, conf_class_t *c, attr_value_t *idx);
typedef void (*insert_bp_func_t)(conf_object_t *object, breakpoint_t *bp, generic_address_t start, generic_address_t end);
typedef struct { uint64 (*tpr_r)(conf_object_t *obj); void (*tpr_w)(conf_object_t *obj, uint64 tpr); void (*local_int)(conf_object_t *obj, local_apic_interrupt_t int_type); void (*init)(conf_object_t *obj); } apic_cpu_interface_t;
typedef struct { generic_transaction_t s; int mode; palcode_memop_flags_t palcode_flags; uint64 pte; } alpha_memory_transaction_t;
typedef void (*ethernet_link_snoop_t)(void *user_data, conf_object_t *clock, bytes_t packet);
typedef int firewire_ack_code_t;
constant Firewire_Ack_Complete = 1;
constant Firewire_Ack_Pending = 2;
constant Firewire_Ack_Busy_X = 4;
constant Firewire_Ack_Busy_A = 5;
constant Firewire_Ack_Busy_B = 6;
constant Firewire_Ack_Tardy = 11;
constant Firewire_Ack_Conflict_Error = 12;
constant Firewire_Ack_Data_Error = 13;
constant Firewire_Ack_Type_Error = 14;
constant Firewire_Ack_Address_Error = 15;
constant Firewire_Ack_No_Destination = 16;
constant Firewire_Ack_No_Ack = 17;
typedef int mod_def_t;
typedef struct { void (*presence_change)(conf_object_t *dst, conf_object_t *src, int is_present); void (*inject_power_fault)(conf_object_t *obj); void (*press_attention_button)(conf_object_t *obj); void (*set_mrl_state)(conf_object_t *obj, int locked); int (*get_mrl_state)(conf_object_t *obj); } pci_express_hotplug_interface_t;
typedef void class_interface_t;
typedef int (*dma_write_data_addr_t)(conf_object_t *, logical_address_t, int, uint8 *, int);
typedef struct { interrupt_ack_fn_t ack; } interrupt_cpu_interface_t;
typedef struct { int (*send_frame)(conf_object_t *obj, dbuffer_t *buf, int replace_crc); int (*check_tx_bandwidth)(conf_object_t *obj); void (*add_mac)(conf_object_t *obj, const uint8 *mac); void (*del_mac)(conf_object_t *obj, const uint8 *mac); void (*add_mac_mask)(conf_object_t *obj, const uint8 *mac, const uint8 *mask); void (*del_mac_mask)(conf_object_t *obj, const uint8 *mac, const uint8 *mask); void (*set_promiscous_mode)(conf_object_t *obj, int enable); } ieee_802_3_phy_interface_t;
typedef struct { arm_avic_t (*get_interrupt_address)(conf_object_t *obj); } arm_avic_interface_t;
typedef struct { void (*set_baudrate)(conf_object_t *obj, int rate, int commit); void (*set_data_bits)(conf_object_t *obj, int bits, int commit); void (*set_stop_bits)(conf_object_t *obj, stop_bits_t stop_bits, int commit); void (*set_parity_mode)(conf_object_t *obj, parity_mode_t parity_mode, int commit); void (*set_dtr)(conf_object_t *obj, int status); void (*set_rts)(conf_object_t *obj, int status); void (*set_break)(conf_object_t *obj, int status); } rs232_console_interface_t;
typedef int apic_trigger_mode_t;
constant Apic_Trigger_Mode_Edge = 0;
constant Apic_Trigger_Mode_Level = 1;
typedef struct { exception_type_t (*memory_access)(conf_object_t *obj, generic_transaction_t *mem_op); void (*raise_interrupt)(conf_object_t *obj, conf_object_t *dev, int pin); void (*lower_interrupt)(conf_object_t *obj, conf_object_t *dev, int pin); int (*interrupt_acknowledge)(conf_object_t *obj); int (*add_map)(conf_object_t *obj, conf_object_t *dev, addr_space_t space, conf_object_t *target, map_info_t info); int (*remove_map)(conf_object_t *obj, conf_object_t *dev, addr_space_t space, int function); void (*set_bus_number)(conf_object_t *obj, int bus_id); void (*set_sub_bus_number)(conf_object_t *obj, int bus_id); void (*add_default)(conf_object_t *obj, conf_object_t *dev, addr_space_t space, conf_object_t *target, map_info_t info); void (*remove_default)(conf_object_t *obj, addr_space_t space); void (*bus_reset)(conf_object_t *obj); void (*special_cycle)(conf_object_t *obj, uint32 value); void (*system_error)(conf_object_t *obj); int (*get_bus_address)(conf_object_t *obj, conf_object_t *dev); void (*set_device_timing_model)(conf_object_t *obj, conf_object_t *dev, conf_object_t *timing_model); void (*set_device_status)(conf_object_t *obj, int device, int function, int enabled); } pci_bus_interface_t;
typedef int i2c_device_flag_t;
constant I2C_flag_exclusive = 0;
constant I2C_flag_shared = 1;
typedef void (*remove_bp_range_func_t)(conf_object_t *object, breakpoint_id_t bp_id, access_t access, generic_address_t start, generic_address_t end);
typedef struct { void (*signal_interrupt)(conf_object_t *obj, uint8 destination, uint8 cls, uint8 priority, uint8 source, uint32 data); } cell_interrupt_receiver_interface_t;
typedef struct { uint64 (*read_register)(conf_object_t *obj, uint32 thread_id, uint32 reg, uint32 sel); void (*write_register)(conf_object_t *obj, uint32 thread_id, uint64 value, uint32 reg, uint32 sel); } mips_coprocessor_interface_t;
typedef int branch_recorder_direction_t;
constant BR_Direction_From = 0;
constant BR_Direction_To = 1;
typedef struct { uint16 buttons; uint16 x; uint16 y; uint16 z; } abs_pointer_state_t;
typedef int access_t;
constant Sim_Access_Read = 1;
constant Sim_Access_Write = 2;
constant Sim_Access_Execute = 4;
typedef struct {  } pre_conf_object_set_t;
typedef struct { instruction_fetch_mode_t (*get_mode)(conf_object_t *obj); void (*set_mode)(conf_object_t *obj, instruction_fetch_mode_t mode); int (*get_line_size)(conf_object_t *obj); void (*set_line_size)(conf_object_t *obj, int size); } instruction_fetch_interface_t;
typedef struct { int (*set_state)(conf_object_t *device, i2c_device_state_t state, uint8 address); uint8 (*read_data)(conf_object_t *device); void (*write_data)(conf_object_t *device, uint8 value); } i2c_device_interface_t;
typedef struct { physical_address_t base; physical_address_t start; physical_address_t length; int function; uint8 priority; int align_size; swap_mode_t reverse_endian; } map_info_t;
typedef struct { conf_class_t *class_data; const char *name; conf_object_t *queue; bool configured; } conf_object_t;
typedef struct { int (*add_map)(conf_object_t *space, conf_object_t *dev, conf_object_t *target, map_info_t map_info); int (*remove_map)(conf_object_t *space, conf_object_t *dev, int function); int (*add_default)(conf_object_t *space, conf_object_t *dev, conf_object_t *target, map_info_t map_info); void (*remove_default)(conf_object_t *space); int (*map_simple)(conf_object_t *space, conf_object_t *dev, const char *dev_port, map_info_t map_info); int (*map_bridge)(conf_object_t *space, conf_object_t *dev, const char *dev_port, conf_object_t *target, const char *target_port, map_info_t map_info); int (*unmap)(conf_object_t *space, conf_object_t *dev, const char *dev_port); int (*unmap_address)(conf_object_t *space, conf_object_t *dev, physical_address_t base, const char *dev_port); } map_demap_interface_t;
typedef int pseudo_exceptions_t;
constant Sim_PE_No_Exception = 1025;
constant Sim_PE_Silent_Break = 1026;
constant Sim_PE_Stop_Request = 1027;
constant Sim_PE_Inquiry_Outside_Memory = 1028;
constant Sim_PE_Inquiry_Unhandled = 1029;
constant Sim_PE_Execute_Outside_Memory = 1030;
constant Sim_PE_IO_Not_Taken = 1031;
constant Sim_PE_IO_Error = 1032;
constant Sim_PE_Interrupt_Break = 1033;
constant Sim_PE_Interrupt_Break_Take_Now = 1034;
constant Sim_PE_Stall_Cpu = 1035;
constant Sim_PE_Locked_Memory = 1036;
constant Sim_PE_Return_Break = 1037;
constant Sim_PE_Instruction_Finished = 1038;
constant Sim_PE_Default_Semantics = 1039;
constant Sim_PE_Ignore_Semantics = 1040;
constant Sim_PE_Speculation_Failed = 1041;
constant Sim_PE_Invalid_Address = 1042;
constant Sim_PE_MAI_Return = 1043;
constant Sim_PE_Last = 1044;
typedef struct {  } atm_msg_t;
typedef struct { insert_bp_func_t insert_breakpoint; remove_bp_func_t remove_breakpoint; remove_bp_range_func_t remove_breakpoint_range; get_bp_ranges_func_t get_breakpoint_ranges; get_bp_func_t get_breakpoints; } breakpoint_interface_t;
typedef struct { int (*get_number)(conf_object_t *obj, const char *name); const char *(*get_name)(conf_object_t *obj, int reg); uinteger_t (*read)(conf_object_t *obj, int reg); void (*write)(conf_object_t *obj, int reg, uinteger_t val); attr_value_t (*all_registers)(conf_object_t *obj); int (*register_info)(conf_object_t *obj, int reg, ireg_info_t info); } int_register_interface_t;
typedef struct { int (*start)(conf_object_t *i2c_bus, uint8 address); int (*stop)(conf_object_t *i2c_bus); uint8 (*read_data)(conf_object_t *i2c_bus); void (*write_data)(conf_object_t *i2c_bus, uint8 value); int (*register_device)(conf_object_t *i2c_bus, conf_object_t *device, uint8 address, uint8 mask, i2c_device_flag_t flags); void (*unregister_device)(conf_object_t *i2c_bus, conf_object_t *device, uint8 address, uint8 mask); } i2c_bus_interface_t;
typedef void (*output_handler_t)(void *data, const char *src, size_t length);
typedef uint64 instr_type_t;
typedef int apic_bus_status_t;
constant Apic_Bus_Accepted = 0;
constant Apic_Bus_Retry = 1;
constant Apic_Bus_No_Target = 2;
constant Apic_Bus_Invalid = 3;
typedef struct { void (*cts)(conf_object_t *obj, int status); void (*dsr)(conf_object_t *obj, int status); void (*ring)(conf_object_t *obj, int status); void (*carrier)(conf_object_t *obj, int status); void (*got_break)(conf_object_t *obj); void (*got_frame_error)(conf_object_t *obj); } rs232_device_interface_t;
typedef struct { uint64 significand; uint32 exponent; uint1 sign; uint1 nat; } ia64_fp_register_t;
typedef struct { void (*system_error)(conf_object_t *obj); void (*raise_interrupt)(conf_object_t *obj, conf_object_t *irq_obj, int device, int pin); void (*lower_interrupt)(conf_object_t *obj, conf_object_t *irq_obj, int device, int pin); } pci_bridge_interface_t;
typedef int (*utopia_ii_send_func)(conf_object_t *obj, int device, int port, atm_msg_t *msg);
typedef struct { recorder_t *(*attach)(conf_object_t *rec, conf_object_t *obj, recorder_input_handler_t input_from_recorder); void (*detach)(conf_object_t *rec, recorder_t *r); void (*input)(conf_object_t *rec, recorder_t *r, dbuffer_t *data, uint32 uint_data); } recorder_interface_t;
typedef struct { void (*resend_pending_interrupts)(conf_object_t *obj, uint8 destination, uint8 masked_source); } cell_interrupt_provider_interface_t;
typedef breakpoint_vector_t (*get_bp_func_t)(conf_object_t *object, access_t access, breakpoint_kind_t type, generic_address_t start, generic_address_t end);
typedef int phy_speed_t;
constant Phy_Speed_10BASE_T = 1;
constant Phy_Speed_10BASE_T_FD = 2;
constant Phy_Speed_100BASE_TX = 4;
constant Phy_Speed_100BASE_T4 = 8;
constant Phy_Speed_100BASE_T2 = 16;
constant Phy_Speed_100BASE_TX_FD = 32;
constant Phy_Speed_100BASE_T2_FD = 64;
constant Phy_Speed_1000BASE_T = 128;
constant Phy_Speed_1000BASE_T_FD = 256;
typedef struct { branch_arc_t *(*next)(branch_arc_iter_t *i); void (*destroy)(branch_arc_iter_t *i); } branch_arc_iter_t;
typedef gen_spr_access_type_t ppc_spr_access_type_t;
typedef int firewire_transaction_code_t;
constant Firewire_Write_Quadlet = 0;
constant Firewire_Write_Block = 1;
constant Firewire_Write_Response = 2;
constant Firewire_Read_Quadlet = 4;
constant Firewire_Read_Block = 5;
constant Firewire_Read_Quadlet_Response = 6;
constant Firewire_Read_Block_Response = 7;
constant Firewire_Cycle_Start = 8;
constant Firewire_Lock = 9;
constant Firewire_Streaming = 10;
constant Firewire_Lock_Response = 11;
typedef struct { register_type_t type; register_id_t id; uint1 input; uint1 output; } reg_info_t;
typedef gen_spr_ret_t (*gen_spr_user_setter_func_t)(conf_object_t *cpu, integer_t spr_number, uinteger_t value, gen_spr_access_type_t type, void *user_data);
typedef int pcie_message_type_t;
constant PCIE_Msg_Assert_INTA = 32;
constant PCIE_Msg_Assert_INTB = 33;
constant PCIE_Msg_Assert_INTC = 34;
constant PCIE_Msg_Assert_INTD = 35;
constant PCIE_Msg_Deassert_INTA = 36;
constant PCIE_Msg_Deassert_INTB = 37;
constant PCIE_Msg_Deassert_INTC = 38;
constant PCIE_Msg_Deassert_INTD = 39;
constant PCIE_PM_Active_State_Nak = 20;
constant PCIE_PM_PME = 24;
constant PCIE_PM_Turn_Off = 25;
constant PCIE_PM_PME_TO_Ack = 27;
constant PCIE_ERR_COR = 48;
constant PCIE_ERR_NONFATAL = 49;
constant PCIE_ERR_FATAL = 51;
constant PCIE_Locked_Transaction = 0;
constant PCIE_Set_Slot_Power_Limit = 144;
constant PCIE_HP_Power_Indicator_On = 69;
constant PCIE_HP_Power_Indicator_Blink = 71;
constant PCIE_HP_Power_Indicator_Off = 68;
constant PCIE_HP_Attention_Button_Pressed = 72;
constant PCIE_HP_Attention_Indicator_On = 65;
constant PCIE_HP_Attention_Indicator_Blink = 67;
constant PCIE_HP_Attention_Indicator_Off = 64;
typedef struct { void (*run)(conf_object_t *obj); void (*stop)(conf_object_t *obj); } execute_interface_t;
typedef struct { integer_t (*active_trackee)(conf_object_t *tracker, conf_object_t *cpu); const char *(*describe_trackee)(conf_object_t *tracker, integer_t tid); attr_value_t (*processor_list)(conf_object_t *tracker); void (*add_processor)(conf_object_t *tracker, conf_object_t *cpu); void (*remove_processor)(conf_object_t *tracker, conf_object_t *cpu); int (*supports_processor)(const char *classname); void (*activate)(conf_object_t *tracker); void (*deactivate)(conf_object_t *tracker); } tracker_interface_t;
typedef struct { generic_address_t lower; generic_address_t upper; breakpoint_range_t *next; } breakpoint_range_t;
typedef struct { map_type_t map_type; conf_object_t *object; const char *port; void *interface_ptr; void *target_interface; void *breakpoint_interface; void *bridge_interface; conf_object_t *target_object; const char *target_port; conf_object_t *bridge; map_info_t map_info; physical_address_t map_size; int deleted; } map_list_t;
typedef struct { generic_transaction_t s; uint1 cache_virtual; uint1 cache_physical; uint1 side_effect; uint1 priv; uint1 red; uint1 hpriv; uint1 henb; uint32 address_space; uint8 prefetch_fcn; sparc_access_type_t access_type; } v9_memory_transaction_t;
typedef struct { map_list_t *(*space_lookup)(conf_object_t *obj, generic_transaction_t *mop, map_info_t mapinfo); exception_type_t (*access)(conf_object_t *obj, generic_transaction_t *mop); exception_type_t (*access_simple)(conf_object_t *obj, conf_object_t *initiator, physical_address_t addr, uint8 *buf, physical_address_t len, read_or_write_t type, endianness_t endian); exception_type_t (*access_simple_inq)(conf_object_t *obj, conf_object_t *initiator, physical_address_t addr, uint8 *buf, physical_address_t len, read_or_write_t type, endianness_t endian); attr_value_t (*read)(conf_object_t *obj, conf_object_t *initiator, physical_address_t addr, int length, int inquiry); exception_type_t (*write)(conf_object_t *obj, conf_object_t *initiator, physical_address_t addr, attr_value_t data, int inquiry); cycles_t (*timing_model_operate)(conf_object_t *space, generic_transaction_t *mop); } memory_space_interface_t;
typedef struct { int dummy; } conf_object_interface_t;
typedef int i2c_status_t;
constant I2C_status_success = 0;
constant I2C_status_noack = 1;
constant I2C_status_bus_busy = 2;
typedef struct { const frags_frag_t *frag; size_t skip; size_t left; } frags_it_t;
typedef struct { void (*page_modified)(conf_object_t *obj, conf_object_t *img, uint64 offset, uint8 *page_data, image_spage_t *spage); } image_snoop_interface_t;
typedef struct { void (*memory_operation)(conf_object_t *obj, uint16 destination, uint16 source, physical_address_t addr, dbuffer_t *buf, rapidio_operation_t op); void (*doorbell)(conf_object_t *obj, uint16 destination, uint16 source, uint16 data); void (*deliver_message)(conf_object_t *obj, uint16 destination, uint16 source, uint16 mbox, uint16 letter, dbuffer_t *data); uint32 (*read_register)(conf_object_t *obj, uint16 destination, uint16 source, uint8 hopcount, int reg_no); void (*write_register)(conf_object_t *obj, uint16 destination, uint16 source, uint8 hopcount, int reg_no, uint32 value); void (*port_write)(conf_object_t *obj, uint16 target_id, uint16 source_id, uint8 hopcount, dbuffer_t *msg); } rapidio_v3_interface_t;
typedef struct { uint8 function_address; uint8 endpoint_number; usb_type_t type; struct { usb_device_request_t control_request; nano_secs_t periodic_time; } u; usb_direction_t direction; int size; dbuffer_t *buf; usb_status_t status; } usb_transfer_t;
typedef void (*obj_hap_func_t)(void *, conf_object_t *ini_obj);
typedef int swap_mode_t;
constant Sim_Swap_None = 0;
constant Sim_Swap_Bus = 1;
constant Sim_Swap_Bus_Trans = 2;
constant Sim_Swap_Trans = 3;
typedef struct { void (*set_cs)(conf_object_t *obj, int cs); void (*set_sk)(conf_object_t *obj, int sk); void (*set_di)(conf_object_t *obj, int di); int (*get_do)(conf_object_t *obj); uint16 (*read_word)(conf_object_t *obj, int offset); void (*write_word)(conf_object_t *obj, int offset, uint16 value); } microwire_interface_t;
typedef struct { logical_address_t logical_address; physical_address_t physical_address; uint32 size; mem_op_type_t type; uint1 atomic; uint1 inquiry; uint1 speculative; uint1 ignore; uint1 may_stall; uint1 ma_no_reissue; uint1 reissue; uint1 block_STC; uint1 use_page_cache; uint1 inverse_endian; uint2 page_cross; uint1 use_iostc; uint1 iostc_blocked; uint1 inhibit_iostc_lookup; uint1 mem_hier_on_fetch; uint32 block_flags; ini_type_t ini_type; conf_object_t *ini_ptr; int id; exception_type_t exception; void *user_ptr; uint8 *real_address; int space_count; page_t *page; page_t *tag_page; uint32 tag_page_ofs; int allocation_size; stall_id_t stall_id; } generic_transaction_t;
typedef struct { void (*changed)(conf_object_t *obj, ieee_802_3_link_status_t status); } link_status_interface_t;
typedef struct { void (*subscribe)(conf_object_t *bus, conf_object_t *listener, const char *listener_port); void (*unsubscribe)(conf_object_t *bus, conf_object_t *listener, const char *listener_port); } simple_dispatcher_interface_t;
typedef int ms1553_shadow_word_t;
constant MS1553_Shadow_Word_Command = 0;
constant MS1553_Shadow_Word_Status = 1;
constant MS1553_Shadow_Word_BIT = 2;
constant MS1553_Shadow_Word_Vector = 3;
typedef struct { int (*serial_access)(conf_object_t *obj, int data_in, int clock); uint16 (*read_register)(conf_object_t *obj, int index); void (*write_register)(conf_object_t *obj, int index, uint16 value); } mii_interface_t;
typedef struct { void (*interrupt_ack)(conf_object_t *obj, int vector); attr_value_t (*get_all)(conf_object_t *obj); int (*get_number)(conf_object_t *obj, const char *name); const char *(*get_name)(conf_object_t *obj, int exc); } h8_ic_interface_t;
typedef attr_value_t (*get_attr_t)(void *ptr, conf_object_t *obj, attr_value_t *idx);
typedef struct { void (*set)(conf_object_t *obj); void (*clear)(conf_object_t *obj); } pin_interface_t;
typedef int apic_destination_mode_t;
constant Apic_Destination_Mode_Physical = 0;
constant Apic_Destination_Mode_Logical = 1;
typedef struct { const char *name; conf_class_t *conf_class; event_class_flag_t flags; void (*callback)(conf_object_t *obj, void *data); void (*destroy)(conf_object_t *obj, void *data); attr_value_t (*get_value)(conf_object_t *obj, void *data); void *(*set_value)(conf_object_t *obj, attr_value_t value); char *(*describe)(conf_object_t *obj, void *data); } event_class_t;
typedef struct { device_interrupt_t interrupt; device_interrupt_clear_t interrupt_clear; } simple_interrupt_interface_t;
typedef int x86_memory_type_t;
constant X86_None = 0;
constant X86_Strong_Uncacheable = 1;
constant X86_Uncacheable = 2;
constant X86_Write_Combining = 3;
constant X86_Write_Through = 4;
constant X86_Write_Back = 5;
constant X86_Write_Protected = 6;
typedef int gen_spr_access_type_t;
constant Sim_Gen_Spr_Instruction_Access = 0;
constant Sim_Gen_Spr_Attribute_Access = 1;
constant Sim_Gen_Spr_Int_Register_Access = 2;
extern gen_spr_access_type_t Sim_PPC_Spr_Instruction_Access;
extern gen_spr_access_type_t Sim_PPC_Spr_Attribute_Access;
extern gen_spr_access_type_t Sim_PPC_Spr_Int_Register_Access;
typedef struct { dma_read_data_t read_data; dma_write_data_t write_data; dma_read_data_addr_t read_data_addr; dma_write_data_addr_t write_data_addr; dma_transfer_time_t transfer_time; dma_set_interrupt_t set_interrupt; dma_clr_interrupt_t clr_interrupt; dma_enable_call_t enable_call; } common_dma_interface_t;
typedef int h8_interrupt_type_t;
constant H8_Int_Exception = 0;
constant H8_Int_Trap = 1;
constant H8_Int_Interrupt = 2;
constant H8_Int_Nmi = 3;
typedef struct { void *data; void *meta_data; int dirty; int init_backed; int init_filled; int mmapped_fd; uint32 gen_count; uint64 offs; conf_object_t *img_obj; page_share_t *shared; uint64 gen_count_2; } image_spage_t;
typedef struct { exception_type_t (*port_operation)(conf_object_t *pspace_obj, generic_transaction_t *mop, map_info_t map_info); attr_value_t (*read)(conf_object_t *obj, conf_object_t *initiator, physical_address_t addr, int length, int inquiry); exception_type_t (*write)(conf_object_t *obj, conf_object_t *initiator, physical_address_t addr, attr_value_t data, int inquiry); } port_space_interface_t;
typedef struct { int (*connect_terminal)(conf_object_t *bridge, conf_object_t *obj, uint8 rt_addr); int (*disconnect_terminal)(conf_object_t *bridge, uint8 rt_addr); int (*set_data)(conf_object_t *obj, uint8 rt_addr, uint8 sub_addr, ms1553_dir_t dir, ms1553_words_t data); int (*get_data)(conf_object_t *obj, uint8 rt_addr, uint8 sub_addr, ms1553_dir_t dir, ms1553_words_t *data); int (*set_shadow_word)(conf_object_t *obj, uint8 rt_addr, ms1553_shadow_word_t word, uint16 data); int (*get_shadow_word)(conf_object_t *obj, uint8 rt_addr, ms1553_shadow_word_t word, uint16 *data); } ms1553_bridge_bus_interface_t;
typedef struct { const cpu_list_t *(*get_cpu_list)(conf_object_t *cpu_group); } cpu_group_interface_t;
typedef struct { int dummy; } component_interface_t;
typedef struct { void (*set_a20_line)(conf_object_t *, int); int (*get_a20_line)(conf_object_t *); } a20_interface_t;
typedef simtime_t cycles_t;
typedef void (*device_interrupt_clear_t)(conf_object_t *, int);
typedef uint64 logical_address_t;
typedef int x86_pin_t;
constant Pin_Init = 0;
constant Pin_Smi = 1;
constant Pin_Nmi = 2;
constant Pin_Ignne = 3;
typedef int hap_type_t;
typedef uint64 linear_address_t;
typedef void (*interrupt_ack_t)(conf_object_t *obj, conf_object_t *cpu, int cpu_mid, int ack, void *usr);
typedef struct { sapic_bus_status_t (*interrupt)(conf_object_t *obj, sapic_delivery_mode_t delivery_mode, int level_assert, sapic_trigger_mode_t trigger_mode, uint8 vector, uint16 destination); } sapic_bus_interface_t;
typedef struct { uinteger_t addr_from; uinteger_t addr_to; integer_t count; branch_arc_type_t type; } branch_arc_t;
typedef struct { int (*connect_device)(conf_object_t *obj, conf_object_t *dev); void (*disconnect_device)(conf_object_t *obj, conf_object_t *dev); int (*send_char)(conf_object_t *obj, int id, int ch); void (*receive_ready)(conf_object_t *obj, int id); } serial_link_interface_t;
typedef struct { int valid; physical_address_t address; physical_address_t block_start; physical_address_t block_end; } physical_block_t;
typedef struct { void (*bus_freed)(conf_object_t *device); void (*read_response)(conf_object_t *device, uint8 value); void (*ack_read_response)(conf_object_t *device); void (*write_response)(conf_object_t *device, i2c_status_t status); void (*start_response)(conf_object_t *device, i2c_status_t status); } i2c_master_interface_t;
typedef struct { size_t len; uint8 *data; } buffer_t;
typedef struct { icode_block_t *icode; icode_page_t *first_crossing_page; icode_page_t *second_crossing_page; } icode_page_t;
typedef struct { interrupt_cpu_t interrupt_cpu; trap_cpu_t trap_cpu; } sparc_interrupt_interface_t;
typedef struct { int (*get_number)(conf_object_t *obj, const char *name); const char *(*get_name)(conf_object_t *obj, int exc); int (*get_source)(conf_object_t *obj, int exc); attr_value_t (*all_exceptions)(conf_object_t *obj); } exception_interface_t;
typedef struct { void (*raise_interrupt)(conf_object_t *obj, conf_object_t *irq_obj, int device, int pin); void (*lower_interrupt)(conf_object_t *obj, conf_object_t *irq_obj, int device, int pin); } pci_interrupt_interface_t;
typedef struct { cycles_t (*get_cycle_count)(conf_object_t *queue); double (*get_time)(conf_object_t *queue); cycles_t (*cycles_delta)(conf_object_t *clock, double when); uint64 (*get_frequency)(conf_object_t *queue); void (*post_cycle)(conf_object_t *queue, event_class_t *evclass, conf_object_t *obj, cycles_t cycles, void *user_data); void (*post_time)(conf_object_t *queue, event_class_t *evclass, conf_object_t *obj, double seconds, void *user_data); void (*cancel)(conf_object_t *queue, event_class_t *evclass, conf_object_t *obj, int (*pred)(void *data, void *match_data), void *match_data); cycles_t (*find_next_cycle)(conf_object_t *queue, event_class_t *evclass, conf_object_t *obj, int (*pred)(void *data, void *match_data), void *match_data); attr_value_t (*events)(conf_object_t *obj); cycles_t (*advance)(conf_object_t *queue, cycles_t cycles); } cycle_interface_t;
typedef int log_type_t;
constant Sim_Log_Info = 0;
constant Sim_Log_Error = 1;
constant Sim_Log_Undefined = 2;
constant Sim_Log_Spec_Violation = 3;
constant Sim_Log_Unimplemented = 4;
constant Sim_Log_Num_Types = 5;
typedef int usb_status_t;
constant USB_Status_Undef = 0;
constant USB_Status_Ack = 1;
constant USB_Status_Nak = 2;
constant USB_Status_Stall = 3;
typedef struct { tuple_int_string_t (*disassemble)(conf_object_t *obj, generic_address_t address, attr_value_t instruction_data, int sub_operation); void (*set_program_counter)(conf_object_t *obj, logical_address_t pc); logical_address_t (*get_program_counter)(conf_object_t *obj); physical_block_t (*logical_to_physical)(conf_object_t *obj, logical_address_t address, access_t access_type); int (*enable_processor)(conf_object_t *obj); int (*disable_processor)(conf_object_t *obj); int (*get_enabled)(conf_object_t *obj); cpu_endian_t (*get_endian)(conf_object_t *obj); conf_object_t *(*get_physical_memory)(conf_object_t *obj); int (*get_logical_address_width)(conf_object_t *obj); int (*get_physical_address_width)(conf_object_t *obj); const char *(*architecture)(conf_object_t *obj); } processor_info_interface_t;
typedef struct { int dummy; } mips_interface_t;
typedef int breakpoint_kind_t;
constant Sim_Break_Physical = 0;
constant Sim_Break_Virtual = 1;
constant Sim_Break_Linear = 2;
typedef int branch_arc_type_t;
constant Branch_Arc_Branch = 0;
constant Branch_Arc_Exception = 1;
constant Branch_Arc_Exception_Return = 2;
constant Branch_Arc_Max = 3;
typedef struct { generic_transaction_t s; processor_mode_t mode; linear_address_t linear_address; uint16 selector; uint1 access_linear; uint1 io; uint1 fault_as_if_write; x86_access_type_t access_type; x86_memory_type_t pat_type; x86_memory_type_t mtrr_type; x86_memory_type_t effective_type; int sequence_number; } p2_memory_transaction_t;
typedef struct { void (*keyboard_ready)(conf_object_t *obj); } kbd_console_interface_t;
typedef struct { trackee_unix_type_t (*trackee_type)(conf_object_t *tracker, integer_t tid); integer_t (*tid_to_pid)(conf_object_t *tracker, integer_t tid); integer_t (*pid_to_tid)(conf_object_t *tracker, integer_t pid); attr_value_t (*pid_comm_list)(conf_object_t *tracker); } tracker_unix_interface_t;
typedef struct { instr_type_t type; logical_address_t return_pc; int delay_slots; int length; const char *name; instr_info_dep_t *dependencies; } instr_info_t;
typedef int mem_op_type_t;
constant Sim_Trans_Load = 0;
extern mem_op_type_t Sim_Trans_Store;
extern mem_op_type_t Sim_Trans_Instr_Fetch;
extern mem_op_type_t Sim_Trans_Prefetch;
extern mem_op_type_t Sim_Trans_Cache;
typedef struct { void (*receive_frame)(conf_object_t *obj, const frags_t *frame); } ethernet_common_device_interface_t;
typedef int (*dma_read_data_addr_t)(conf_object_t *, logical_address_t, int, uint8 *, int);
typedef void (*interrupt_changed_state_callback_t)(conf_object_t *interrupt_controller, conf_object_t *device, int irq_level, int enabled, void *data);
typedef struct { void (*set)(conf_object_t *obj, uint64 numerator, uint64 denominator); } frequency_listener_interface_t;
typedef struct { void (*signal_raise)(conf_object_t *obj); void (*signal_lower)(conf_object_t *obj); void (*signal_level)(conf_object_t *obj, int level); } signal_interface_t;
typedef struct { int start; int length; const char *string; } disasm_instr_t;
typedef struct { size_t len; uint8 *str; } byte_string_t;
typedef struct { void (*receive_word)(conf_object_t *dev, uint32 word, int parity_ok); } arinc429_receiver_interface_t;
typedef void (*trap_cpu_t)(conf_object_t *cpu, exception_type_t trap_vector);
typedef gen_spr_user_setter_func_t ppc_spr_user_setter_func_t;
typedef int sapic_delivery_mode_t;
constant SAPIC_Fixed0 = 0;
constant SAPIC_Fixed1 = 1;
constant SAPIC_PMI = 2;
constant SAPIC_NMI = 4;
constant SAPIC_INIT = 5;
constant SAPIC_Ext_INT = 7;
typedef struct { generic_transaction_t s; processor_mode_t mode; int rotate; } arm_memory_transaction_t;
typedef int class_kind_t;
constant Sim_Class_Kind_Vanilla = 0;
constant Sim_Class_Kind_Session = 1;
constant Sim_Class_Kind_Pseudo = 2;
typedef struct { uint64 cbp_hits; uint64 cbp_activate_at; char *cbp_prefix; char *cbp_substr; char *cbp_pattern; char *cbp_mask; char *cbp_strpattern; char *cbp_strmask; int cbp_patternlength; uint32 cbp_flags; int cbp_active; bp_time_stamp_t *cbp_timestamps; int cbp_deleted; breakpoint_id_t cbp_id; breakpoint_kind_t cbp_type; access_t cbp_access; conf_object_t *cbp_object; breakpoint_range_t *save_ranges; } breakpoint_t;
typedef int apic_delivery_mode_t;
constant Apic_Delivery_Mode_Fixed = 0;
constant Apic_Delivery_Mode_Lowest_Priority = 1;
constant Apic_Delivery_Mode_SMI = 2;
constant Apic_Delivery_Mode_Remote_Read = 3;
constant Apic_Delivery_Mode_NMI = 4;
constant Apic_Delivery_Mode_INIT = 5;
constant Apic_Delivery_Mode_Start_Up = 6;
constant Apic_Delivery_Mode_Ext_INT = 7;
typedef int register_type_t;
constant Sim_Reg_Type_Invalid = 0;
constant Sim_Reg_Type_Integer = 1;
constant Sim_Reg_Type_Floating = 2;
constant Sim_Reg_Type_Control = 3;
typedef struct { generic_transaction_t s; uint32 original_size; int bus_address; } pci_memory_transaction_t;
typedef simtime_t (*dma_transfer_time_t)(conf_object_t *, int, int);
typedef struct { void *(*save)(conf_object_t *obj); void (*merge)(conf_object_t *obj, void *prev, void *killed); void (*prepare_restore)(conf_object_t *obj); void (*finish_restore)(conf_object_t *obj, void *state); } temporal_state_interface_t;
typedef struct { retrieve_packet_t retrieve_packet; store_packet_t store_packet; } ppc4xx_mal_interface_t;
typedef int64 integer_t;
typedef struct { void (*register_user_handlers)(conf_object_t *cpu, integer_t spr_number, gen_spr_user_getter_func_t getter, void *user_getter_data, gen_spr_user_setter_func_t setter, void *user_setter_data, int privilege_checks); void (*unregister_user_handlers)(conf_object_t *cpu, integer_t spr_number); void (*set_target_value)(conf_object_t *cpu, uinteger_t value); void (*stash_value)(conf_object_t *cpu, integer_t spr_number, uinteger_t value); uinteger_t (*fetch_value)(conf_object_t *cpu, integer_t spr_number); gen_spr_ret_t (*default_getter)(conf_object_t *cpu, integer_t spr_number, gen_spr_access_type_t type); gen_spr_ret_t (*default_setter)(conf_object_t *cpu, integer_t spr_number, uinteger_t value, gen_spr_access_type_t type); const char *(*get_name)(conf_object_t *cpu, integer_t spr_number); integer_t (*get_number)(conf_object_t *cpu, const char *spr_name); } spr_interface_t;
typedef void (*interrupt_by_id_t)(conf_object_t *obj, conf_object_t *src, int src_id, int dst_id, interrupt_ack_t interrupt_ack, uint64 *data, void *usr, int dummy0, int dummy1);
