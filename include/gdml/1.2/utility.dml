dml 1.2;

template _reg_or_field {
    parameter is_register  = ($objtype == "register");
    parameter reg_or_field = ($is_register) ? "register" : "field";
}

/* <add id="obsolete dml utilities">
   <name index="true">read</name>
   <doc>
   <doc-item name="DESCRIPTION">
   Dummy template that can be used to document that a register uses
   the default <em>read</em> semantics.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   </doc>
   </add>
*/
template read {
    // obsolete - read is default in dml-builtins.dml
}


/* <add id="obsolete dml utilities">
   <name index="true">write</name>
   <doc>
   <doc-item name="DESCRIPTION">
   Dummy template that can be used to document that a register uses the
   default <em>write</em> semantics.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   </doc>
   </add>
*/
template write {
    // obsolete - write is default in dml-builtins.dml
}

/* <add id="dml utilities">
   <name index="true">read_write</name>
   <doc>
   <doc-item name="DESCRIPTION">
   The object value can be modified by both software and hardware. Uses the
   default read and write methods.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   </doc>
   </add>
*/
template read_write {
    // for info only - read/write have defaults in dml-builtins.dml
}

/* <add id="dml utilities">
   <name index="true">scratch</name>
   <doc>
   <doc-item name="DESCRIPTION">
   The object is a data scratch area.
   Uses the default read and write methods.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   </doc>
   </add>
*/
template scratch {
    // for info only - read/write
}

/* <add id="dml utilities">
   <name index="true">ignore_write</name>
   <doc>
   <doc-item name="DESCRIPTION">
   Software writes are ignored.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   </doc>
   </add>
*/
template ignore_write {
    method write(value) {
        // ignored
    }
}

/* <add id="dml utilities">
   <name index="true">read_zero</name>
   <doc>
   <doc-item name="DESCRIPTION">
   Software reads return 0.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   </doc>
   </add>
*/
template read_zero {
    method read -> (value) {
        value = 0;
    }
}

/* <add id="dml utilities">
   <name index="true">read_only</name>
   <doc>
   <doc-item name="DESCRIPTION">
   The object value is read-only for software, the object value can be
   modified by hardware.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   First software write results in a spec_violation log-message on
   log-level 1, remaining writes on log-level 2.
   </doc-item>
   </doc>
   </add>
*/
template read_only {
    is _reg_or_field;

    method write(value) {
        static uint8 log_level = 1;
        if ($allocate) {
            if ($is_register || value != $this) {
                log "spec_violation" , log_level, Register_Write:
                    "Write to read-only %s %s (value written = %#x, contents = %#x).",
                    $reg_or_field, $qname, value, $this;
                log_level = 2;
            }
        } else {
            if ($is_register) {
                log "spec_violation", log_level, Register_Write:
                    "Write to read-only %s %s (value written = %#x).",
                    $reg_or_field, $qname, value;
                log_level = 2;
            }
        }
    }
}

/* <add id="dml utilities">
   <name index="true">write_only</name>
   <doc>
   <doc-item name="DESCRIPTION">
   The objects value can be modified by software but can't be read back, reads
   return 0.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   The first time the object is read there is a spec_violation
   log-message on log-level 1, remaining reads on log-level 2.
   </doc-item>
   </doc>
   </add>
*/
template write_only {
    is _reg_or_field;
    method read() -> (value) {
        if ($is_register) {
            static uint8 log_level = 1;
            log "spec_violation", log_level, Register_Read:
                "Read from write-only register %s (returning 0).", $qname;
            log_level = 2;
        }
        value = 0;
    }
}

/* <add id="dml utilities">
   <name index="true">write_1_clears</name>
   <doc>
   <doc-item name="DESCRIPTION">
   Software can only clear bits. This feature is often when
   hardware sets bits and software clears them to acknowledge.
   Software write 1's to clear bits. The new object value is
   a bitwise AND of the old object value and the bitwise
   complement of the value written by software.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   </doc>
   </add>
*/
template write_1_clears {
    method write(value) {
        $this = $this & ~value;
    }
}

/* <add id="dml utilities">
   <name index="true">clear_on_read</name>
   <doc>
   <doc-item name="DESCRIPTION">
   Software reads return the object value. The object value is then reset to 0
   as a side affect of the read.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   </doc>
   </add>
*/
template clear_on_read {
    method read() -> (value) {
        value = $this;
        $this = 0;
    }
}

/* <add id="dml utilities">
   <name index="true">write_1_only</name>
   <doc>
   <doc-item name="DESCRIPTION">
   Software can only set bits to 1.
   The new object value is the bitwise OR of the
   old object value and the value written by software.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   <doc-item name="RELATED TEMPLATES">write_0_only</doc-item>
   </doc>
   </add>
*/
template write_1_only {
    method write(value) {
        $this |= value;
    }
}

/* <add id="dml utilities">
   <name index="true">write_0_only</name>
   <doc>
   <doc-item name="DESCRIPTION">
   Software can only set bits to 0.
   The new object value is the bitwise AND of the
   old object value and the value written by software.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   <doc-item name="RELATED TEMPLATES">write_1_only</doc-item>
   </doc>
   </add>
*/
template write_0_only {
    method write(value) {
        $this &= value;
    }
}

/* <add id="dml utilities">
   <name index="true">read_constant</name>
   <doc>
   <doc-item name="DESCRIPTION">
   Software reads return a constant value. No storage is
   allocated for the object value.  If this template is used on a register,
   it will not be checkpointed.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   <doc-item name="PARAMETERS">
   value: the constant value
   </doc-item>
   <doc-item name="RELATED TEMPLATES">constant, silent_constant</doc-item>
   </doc>
   </add>
*/
template read_constant {
    parameter allocate = false;
    parameter configuration = "pseudo";
    parameter value default undefined;
    parameter _real_value =
            ((defined $value) ? $value :
             ((defined $hard_reset_value) ? $hard_reset_value :
              ((defined $reg.hard_reset_value)
               ? ($reg.hard_reset_value)[$msb:$lsb] : 0)));

    method read() -> (value) {
        value = $_real_value[$bitsize-1:0];
    }
    method get() -> (value) {
        value = $_real_value[$bitsize-1:0];
    }
}

template _generic_constant {
    is read_constant;

    method set(value) {
        if (value != $_real_value[$bitsize-1:0]) {
            if (SIM_object_is_configured($dev.obj)) {
                log "error": "Can't set %s (attribute value = %#x, expected constant value = %#x)",
                    $qname, value, $_real_value[$bitsize-1:0];
                throw;
            } else {
                log "info", 2, 0: "Ignoring value when setting %s (attribute value = %#x, expected constant value = %#x)",
                    $qname, value, $_real_value[$bitsize-1:0];
            }
        }
    }
}

/* <add id="dml utilities">
   <name index="true">constant</name>
   <doc>
   <doc-item name="DESCRIPTION">
   The object value will remain constant.
   Software and hardware writes does not update the object value.
   If this template is used on a register, it will not be checkpointed.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   First software write to register or field (if field value is not
   equal to write value) results in a spec_violation log-message on
   log-level 1, remaining writes on log-level 2.
   </doc-item>
   <doc-item name="PARAMETERS">
   value: sets the initial object value
   </doc-item>
   <doc-item name="RELATED TEMPLATES">read_constant, silent_constant</doc-item>
   </doc>
   </add>
*/
template constant {
    is _generic_constant;
    is _reg_or_field;

    method write(value) {
        static uint8 log_level = 1;
        if ($is_register || value != $_real_value[$bitsize-1:0]) {
            log "spec_violation", log_level, Register_Write:
                "Write to constant %s %s (value written = %#x, contents = %#x).",
                $reg_or_field, $qname, value, $_real_value[$bitsize-1:0];
            log_level = 2;
        }
    }
}

/* <add id="dml utilities">
   <name index="true">silent_constant</name>
   <doc>
   <doc-item name="DESCRIPTION">
   The object value will remain constant.
   Software and hardware writes does not update the initial object value.
   If this template is used on a register, it will not be checkpointed.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   <doc-item name="PARAMETERS">
   value: sets the initial object value
   </doc-item>
   <doc-item name="RELATED TEMPLATES">constant, read_constant</doc-item>
   </doc>
   </add>
*/
template silent_constant {
    is _generic_constant;
    is ignore_write;
}

/* <add id="dml utilities">
   <name index="true">zeros</name>
   <doc>
   <doc-item name="DESCRIPTION">
   The object is constant all 0's.
   Software and hardware writes does not update the object value. The
   object value is all 0's.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   First software write to register or field (if field value is not
   equal to write value) results in a spec_violation log-message on
   log-level 1, remaining writes on log-level 2.
   </doc-item>
   </doc>
   </add>
*/
template zeros {
    is constant;
    parameter value = 0;
}

/* <add id="dml utilities">
   <name index="true">ones</name>
   <doc>
   <doc-item name="DESCRIPTION">
   The object is constant all 1's.
   Software and hardware writes does not update the object value. The
   object value is all 1's.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   First software write to register or field (if field value is not
   equal to write value) results in a spec_violation log-message on
   log-level 1, remaining writes on log-level 2.
   </doc-item>
   </doc>
   </add>
*/
template ones {
    is constant;
    parameter value = 0xffffffffffffffff;
}

/* <add id="dml utilities">
   <name index="true">ignore</name>
   <doc>
   <doc-item name="DESCRIPTION">
   The objects functionality is unimportant for both hardware and software.
   Software and hardware reads return 0. Software and hardware writes
   are ignored.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   </doc>
   </add>
*/
template ignore {
    parameter allocate = false;
    method get() -> (value) {
        value = 0;
    }
    method set(value) {
        // ignored
    }
    method read() -> (value) {
        value = 0;
    }
    method write(value) {
    }
}

/* <add id="dml utilities">
   <name index="true">reserved</name>
   <doc>
   <doc-item name="DESCRIPTION">
   The object is marked reserved and should not be used by software.
   Software writes update the object value. Reads are not affected.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   First software write to register or field (if field value is not
   equal to write value) results in a spec_violation log-message on
   log-level 2.
   </doc-item>
   </doc>
   </add>
*/
template reserved {
    is _reg_or_field;
    method write(value) {
        static uint8 log_level = 2;
        if (($is_register || value != $this) && log_level == 2) {
            log "spec_violation", log_level, Register_Write:
                "Write to reserved %s %s (value written = %#x, contents = %#x), will not warn again.",
                $reg_or_field, $qname, value, $this;
            log_level = 5;
        }
        $this = value;
    }
}

template _unimpl_base {
    is _reg_or_field;
    parameter limitations = $limits;
}

template _unimpl_base_warn {
    is _unimpl_base;

    parameter log_level_high default 1;
    parameter log_level_low  default 2;

    method read() -> (value)  {
        static uint8 log_level = $log_level_high;
        if ($is_register) {
            log "unimplemented", log_level, Register_Read:
            "Read from unimplemented %s %s (contents = %#x).",
                $reg_or_field, $qname, $this;
            log_level = $log_level_low;
        }
        value = $this;
    }
    method write(value) {
        static uint8 log_level = $log_level_high;
        if ($is_register || value != $this) {
            log "unimplemented", log_level, Register_Write:
                "Write to unimplemented %s %s (value written = %#x, contents = %#x)%s.",
                $reg_or_field, $qname, value, $this,
                $is_register ? "" : ", will not warn again";
            log_level = $log_level_low;
        }
        $this = value;
    }
}

/* <add id="dml utilities">
   <name index="true">unimplemented</name>
   <doc>
   <doc-item name="DESCRIPTION">
   The object functionality is unimplemented. Warn when software is using the
   object. Software and hardware writes and reads are implemented as default
   writes and reads.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   First software read to a register results in an unimplemented log-message on
   log-level 1, remaining reads on log-level 2. Software reads to fields does
   not result in a log-message. First software write to registers results in
   an unimplemented log-message on log-level 1, remaining writes on log-level 2.
   First write to a field (if field value is not equal to write value) results
   in an unimplemented log-message on log-level 1, remaining writes on
   log-level 2.
   </doc-item>
   <doc-item name="PARAMETERS">
   log_level_high: sets the high log-level (default is 1, see LOG-OUTPUT)
   log_level_low: sets the low log-level (default is 2, see LOG-OUTPUT)
   </doc-item>
   <doc-item name="RELATED TEMPLATES">silent_unimplemented</doc-item>
   <doc-item name="RELATED TEMPLATES">design_limitation</doc-item>
   </doc>
   </add>
*/
template unimplemented {
    is _unimpl_base_warn;
    parameter limits default "Not implemented.";
}

/* <add id="dml utilities">
   <name index="true">silent_unimplemented</name>
   <doc>
   <doc-item name="DESCRIPTION">
   The object functionality is unimplemented, but do not print a
   lot of log-messages when reading or writing.
   Software and hardware writes and reads are implemented as default writes and
   reads.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   First software read to a register results in an unimplemented log-message on
   log-level 3, remaining reads on log-level 4. Software reads to fields does
   not result in a log-message. First software write to a register results in
   an unimplemented log-message on log-level 3, remaining writes on log-level 4.
   First write to a field (if field value is not equal to write value) results
   in an unimplemented log-message on log-level 3, remaining writes on
   log-level 4.
   </doc-item>
   <doc-item name="RELATED TEMPLATES">unimplemented</doc-item>
   <doc-item name="RELATED TEMPLATES">design_limitation</doc-item>
   </doc>
   </add>
*/
template silent_unimplemented {
    parameter log_level_high = 3;
    parameter log_level_low  = 4;
    is unimplemented;
}

/* <add id="dml utilities">
   <name index="true">undocumented</name>
   <doc>
   <doc-item name="DESCRIPTION">
   The object functionality is undocumented or poorly documented.
   Software and hardware writes and reads are implemented as default writes and reads.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   First software write and read result in an undefined log-message on
   log-level 1, remaining on log-level 2.
   </doc-item>
   </doc>
   </add>
*/
template undocumented {
    is _reg_or_field;
    method read() -> (value)  {
        static uint8 log_level = 1;
        log "undefined", log_level, Register_Read:
            "Read from poorly or non-documented %s %s (contents = %#x).",
            $reg_or_field, $qname, $this;
        log_level = 2;
        value = $this;
    }
    method write(value) {
        static uint8 log_level = 1;
        log "undefined", log_level, Register_Write:
            "Write to poorly or non-documented %s %s (value written = %#x, contents = %#x).",
            $reg_or_field, $qname, value, $this;
        log_level = 2;
        $this = value;
    }
}

/* <add id="dml utilities">
   <name index="true">signed</name>
   <doc>
   <doc-item name="DESCRIPTION">
   Defines the object value to be treated as a signed integer, i.e.
   sets the object's <i>signed</i> parameter to <tt>true</tt>.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   </doc>
   </add>
*/
template signed {
    parameter signed = true;
}

/* <add id="dml utilities">
   <name index="true">noalloc</name>
   <doc>
   <doc-item name="DESCRIPTION">
   Do not allocate any storage for the object value, i.e.
   sets the object's <i>allocate</i> parameter to <tt>false</tt>.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   </doc>
   </add>
*/
template noalloc {
    parameter allocate = false;
}

/* <add id="dml utilities">
   <name index="true">unmapped</name>
   <doc>
   <doc-item name="DESCRIPTION">
   Make the offset of a device undefined.  This means that it is not mapped
   in the address space of the bank it is in.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   </doc>
   </add>
*/
template unmapped {
    parameter offset = undefined;
}

/* <add id="dml utilities">
   <name index="true">sticky</name>
   <doc>
   <doc-item name="DESCRIPTION">
   Do not reset object value on soft-reset, keep current value.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   None.
   </doc-item>
   </doc>
   </add>
*/
template sticky {
    method soft_reset() {
        // do nothing
    }
}

/* <add id="dml utilities">
   <name index="true">checkreserved</name>
   <doc>
   <doc-item name="DESCRIPTION">
   Check if the value written to a register matches the bits in the
   <tt>reserved</tt> parameter, and log a spec_violation when it does.
   </doc-item>
   <doc-item name="LOG-OUTPUT">
   A spec_violation message.
   </doc-item>
   </doc>
   </add>
*/
template checkreserved {
    parameter reserved; // An integer
    method before_write(memop, msb1, lsb, value) {
        if ($reserved != 0)
            if (((defined lsb ? (value << lsb) : value) & $reserved) != 0) {
                log "spec_violation":
                    "Write to reserved bits in register %s", $qname;
            }
    }
}

/* <add id="dml utilities">
   <name index="true">design_limitation</name>
   <doc>
   <doc-item name="DESCRIPTION">
   The object's functionality is not in the model's scope and has been
   left unimplemented as a design decision. Software and hardware
   writes and reads are implemented as default writes and reads.
   Debug registers are a prime example of when to use this
   template. This is different from <i>unimplemented</i> which is
   intended to be implement (if required) but is a limitation in
   the current model.
   </doc-item>
   <doc-item name="RELATED TEMPLATES">unimplemented</doc-item>
   <doc-item name="RELATED TEMPLATES">silent_unimplemented</doc-item>
   </doc>
   </add>
*/
template design_limitation {
    is _unimpl_base;
    parameter limits default ("Not implemented (design limitation)."
                              + " This " + $reg_or_field + " is a dummy "
                              + $reg_or_field + " with no side effects.");
}

// SIM API functions and stuff


extern size_t strlen(const char *s);
extern int memcmp(const void *s1, const void *s2, size_t n);
extern void *memcpy(void *dest, const void *src, size_t n);
extern void *memmove(void *dest, const void *src, size_t n);
